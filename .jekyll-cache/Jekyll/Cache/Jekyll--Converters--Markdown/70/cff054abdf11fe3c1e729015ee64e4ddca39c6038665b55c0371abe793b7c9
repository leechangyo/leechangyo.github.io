I"E<h1 id="protectedhttpnlpkookminackrsskanglectcppppphtm">(Protected)[http://nlp.kookmin.ac.kr/sskang/lect/cpp/ppp.htm]</h1>
<ul>
  <li>보호(protected) 멤버
    <ol>
      <li>필요성</li>
    </ol>
    <ul>
      <li>파생클래스에게만 접근이 허용되는 비공개(private) 멤버
    2. 속성</li>
      <li>기본클래스의 비공개(private) 멤버의 속성을 그대로 유지</li>
      <li>다만, 파생클래스의 접근이 허용된다는 점만이 private과 다름!</li>
    </ul>
  </li>
</ul>

<h2 id="기본클래스-접근-방식--private-public-protected">기본클래스 접근 방식 : private, public, protected</h2>
<ol>
  <li>기본클래스를 public으로 접근할 때 : 원래대로 유지
    <ul>
      <li>기본클래스의 공개(public) 멤버 –&gt; 파생플래스의 공개(public) 멤버</li>
      <li>기본클래스의 보호(protected) 멤버 –&gt; 파생플래스의 보호(protected) 멤버</li>
    </ul>
  </li>
  <li>기본클래스를 private으로 접근할 때 : 모두 private으로
    <ul>
      <li>기본클래스의 공개(public) 멤버 –&gt; 파생플래스의 비공개(private) 멤버</li>
      <li>기본클래스의 보호(protected) 멤버 –&gt; 파생플래스의 비공개(private) 멤버</li>
    </ul>
  </li>
  <li>기본클래스를 protected로 접근할 때 : 모두 protected로
    <ul>
      <li>기본클래스의 공개(public) 멤버 –&gt; 파생플래스의 보호(protected) 멤버</li>
      <li>기본클래스의 보호(protected) 멤버 –&gt; 파생플래스의 보호(protected) 멤버</li>
      <li><strong>어떤 경우든 기본클래스의 private 멤버들은 파생클래스에 의해 접근될 수 없음!</strong></li>
    </ul>
  </li>
</ol>

<h1 id="exercise">Exercise</h1>
<blockquote>
  <p>Main.cpp</p>
</blockquote>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#ifndef POINT_H_INCLUDED
#define POINT_H_INCLUDED

class Point //base, parent, superclass
{
    protected:
        int x;
    public:
        Point(int =0);
        ~Point();
        int getX() { return x; }
        void setX(int);
};
class Point2D : public Point //derived, child, subclass
{
    protected:
        int y;
    public:
        Point2D(int =0, int =0);
        ~Point2D();
        int getY() { return y; }
        void setY(int);
        void setX(int);
        void setXY(int, int);

};
class Point3D : public Point2D
{

};

/*
    class Point2D : public Point
    everything what is inside Point (excluding constructor and destructor) will be in Point2D
    private - CANNOT ACCESS
    protected - protected
    public - public

    class Point2D : protected Point
    everything what is inside Point (excluding constructor and destructor) will be in Point2D
    private - CANNOT ACCESS
    protected - protected
    public - protected


    class Point2D : private Point
    everything what is inside Point (excluding constructor and destructor) will be in Point2D
    private - CANNOT ACCESS
    protected - private
    public - private

*/
#endif // POINT_H_INCLUDED

</code></pre></div></div>
:ET