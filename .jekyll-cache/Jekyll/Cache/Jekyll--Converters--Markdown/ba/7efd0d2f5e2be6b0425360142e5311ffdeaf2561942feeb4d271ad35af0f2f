I"<h1 id="templates"><a href="http://tcpschool.com/cpp/cpp_template_function">Templates</a></h1>
<ul>
  <li>템플릿(template)이란 매개변수의 타입에 따라 함수나 클래스를 생성하는 메커니즘을 의미합니다.</li>
  <li>템플릿은 타입이 매개변수에 의해 표현되므로, 매개변수화 타입(parameterized type)이라고도 불립니다</li>
  <li>템플릿을 사용하면 타입마다 별도의 함수나 클래스를 만들지 않고, 여러 타입에서 동작할 수 있는 단 하나의 함수나 클래스를 작성하는 것이 가능합니다.</li>
</ul>

<h2 id="2-function-template함수-템플릿">2. Function Template(함수 템플릿)</h2>
<ul>
  <li>C++에서 함수 템플릿(function template)이란 함수의 일반화된 선언을 의미합니다</li>
  <li>함수 템플릿을 사용하면 같은 알고리즘을 기반으로 하면서, 서로 다른 타입에서 동작하는 함수를 한 번에 정의할 수 있습니다.</li>
  <li>임의의 타입으로 작성된 함수에 특정 타입을 매개변수로 전달하면, C++ 컴파일러는 해당 타입에 맞는 함수를 생성해 줍니다</li>
</ul>

<blockquote>
  <p>문법
```
template <typename 타입이름=""></typename></p>
</blockquote>

<p>함수의 원형</p>

<p>{</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// 함수의 본체
</code></pre></div></div>

<p>}</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
- 위에서 정의된 타입 이름은 함수의 원형과 본체에서 임의의 타입으로 사용할 수 있습니다
- **이렇게 정의된 함수 템플릿을 호출할 때 매개변수로 int형을 전달하면, 함수의 원형과 본체에서 정의된 타입 이름은 모두 int형으로 바뀌게 됩니다.**

&gt; 예제

</code></pre></div></div>
<p>template <typename T=""></typename></p>

<p>void Swap(T&amp; a, T&amp; b);</p>

<p>int main(void)</p>

<p>{</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>int c = 2, d = 3;

cout &lt;&lt; "c : " &lt;&lt; c &lt;&lt; ", d : " &lt;&lt; d &lt;&lt; endl;

Swap(c, d);

cout &lt;&lt; "c : " &lt;&lt; c &lt;&lt; ", d : " &lt;&lt; d &lt;&lt; endl;



string e = "hong", f = "kim";

cout &lt;&lt; "e : " &lt;&lt; e &lt;&lt; ", f : " &lt;&lt; f &lt;&lt; endl;

Swap(e, f);

cout &lt;&lt; "e : " &lt;&lt; e &lt;&lt; ", f : " &lt;&lt; f &lt;&lt; endl;

return 0;
</code></pre></div></div>

<p>}</p>

<p>template <typename T=""></typename></p>

<p>void Swap(T&amp; a, T&amp; b)</p>

<p>{</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>T temp;

temp = a;

a = b;

b = temp;
</code></pre></div></div>

<p>}</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
&gt; 실행 결과

</code></pre></div></div>
<p>c : 2, d : 3</p>

<p>c : 3, d : 2</p>

<p>e : hong, f : kim</p>

<p>e : kim, f : hong
```</p>

<ul>
  <li>함수 템플릿이 각각의 타입에 대해 처음으로 호출될 때, C++ 컴파일러는 해당 타입의 인스턴스를 생성합니다.</li>
  <li>이렇게 생성된 인스턴스는 해당 타입에 대해 특수화된 템플릿 함수입니다.</li>
  <li>이 인스턴스는 함수 템플릿에 해당 타입이 사용될 때마다 호출됩니다.</li>
</ul>

<h2 id="3-명시적-특수화explicit-specialization">3. 명시적 특수화(explicit specialization)</h2>
<ul>
  <li>
    <h2 id="c의-함수-템플릿은-특정-타입에-대한-명시적-특수화를-제공하여-해당-타입에-대해-특별한-동작을-정의할-수-있게-해줍니다">C++의 함수 템플릿은 특정 타입에 대한 명시적 특수화를 제공하여, 해당 타입에 대해 특별한 동작을 정의할 수 있게 해줍니다.</h2>
  </li>
</ul>
:ET