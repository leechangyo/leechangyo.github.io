I"<h1 id="copy-constructor">Copy Constructor</h1>
<blockquote>
  <p>Main.cpp</p>
</blockquote>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#include &lt;iostream&gt;
#include "test.h"

using namespace std;
/* COPY CONSTRUCTOR */

int main()
{

    int a = 10;
    int b = a;

    a = 60;

    cout &lt;&lt; "a : " &lt;&lt; a &lt;&lt; endl; //60
    cout &lt;&lt; "b : " &lt;&lt; b &lt;&lt; endl; //10

    Test obj1(50, 100, 60);
    Test obj2 = obj1;

    obj2.x = 200;
    *(obj1.p) = 700;

    cout &lt;&lt; "obj1.x " &lt;&lt; obj1.x &lt;&lt; endl;
    cout &lt;&lt; "*(obj1.p) " &lt;&lt; *(obj1.p) &lt;&lt; endl;
    cout &lt;&lt; "obj1.y " &lt;&lt; obj1.y &lt;&lt; endl &lt;&lt; endl;

    cout &lt;&lt; "obj2.x " &lt;&lt; obj2.x &lt;&lt; endl;
    cout &lt;&lt; "*(obj2.p)" &lt;&lt; *(obj2.p) &lt;&lt; endl;
    cout &lt;&lt; "obj2.y " &lt;&lt; obj2.y &lt;&lt; endl;


    return 0;
}


</code></pre></div></div>

<blockquote>
  <p>test.h</p>
</blockquote>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#ifndef TEST_H_INCLUDED
#define TEST_H_INCLUDED

class Test
{
    public:
        int x; //50
        int y; //100
        int *p; //60
        Test(const Test &amp;); //copy
        Test(int, int, int);
        ~Test();
};

#endif // TEST_H_INCLUDED

</code></pre></div></div>

<blockquote>
  <p>test.cpp</p>
</blockquote>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#include "test.h"

Test::Test(int x, int y, int value)
{
        this-&gt;x = x;
        this-&gt;y = y;
        this-&gt;p = new int(value); // because of in head file p is the *pointer
}
Test::~Test()
{
        delete p;
}
Test::Test(const Test &amp; obj) //copy
{
    this-&gt;p = new int(*(obj.p)); //because of in head file p is the *pointer
    this-&gt;x = obj.x;
    this-&gt;y = obj.y;
}

</code></pre></div></div>

<ul>
  <li>Result
<a href="https://postimg.cc/w7YszT1N"><img src="https://i.postimg.cc/HsV0QrH6/323131.png" width="500px" title="source: imgur.com" /><a></a></a></li>
</ul>

<h1 id="exercise-2">Exercise 2</h1>
<blockquote>
  <p>Main.cpp</p>
</blockquote>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#include &lt;iostream&gt;
#include "position.h"

using namespace std;

int main()
{
    Position dog(10, 50);

    dog.getPosition();
    dog.setPosition(50, 100);
    dog.getPosition();

    const Position house(100, 200);

    house.getPosition();
//    house.setPosition(444, 444);
    //house.getPosition();

    return 0;
}

</code></pre></div></div>

<blockquote>
  <p>Position.h</p>
</blockquote>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#ifndef POSITION_H_INCLUDED
#define POSITION_H_INCLUDED

class Position
{
    int x, y;
    public:
        Position(int,int);
        ~Position();
        void getPosition() const;
        void setPosition(int, int);
};

#endif // POSITION_H_INCLUDED

</code></pre></div></div>

<blockquote>
  <p>position.cpp</p>
</blockquote>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#include "position.h"
#include &lt;iostream&gt;

using namespace std;

Position::Position(int x, int y)
{
    this-&gt;x = x;
    this-&gt;y = y;
}
Position::~Position()
{

}

void Position::getPosition() const
{
    cout &lt;&lt; "x : " &lt;&lt; x &lt;&lt; endl;
    cout &lt;&lt; "y : " &lt;&lt; y &lt;&lt; endl;
}

void Position::setPosition(int x, int y)
{
    this-&gt;x = x;
    this-&gt;y = y;
}
</code></pre></div></div>

<h1 id="operatorhttpalgamzablogspotcom201603c-operator-overloadinghtml">(operator)[http://algamza.blogspot.com/2016/03/c-operator-overloading.html]</h1>
<ul>
  <li><strong>사용자 정의 클래스</strong> 를 사용할 때 연산자에 특별한 의미를 부여할 수 있다는 점은 C++의 멋진 기능 중 하나입니다.</li>
  <li>이 기능을 연산자 오버로딩(operator overloading) 이라고 합니다. C++의 연산자 오버로딩은 클래스에 특별 멤버 함수를 다음과 같은 명명 규칙에 따라서 작성해 구현할 수 있습니다.
    <h3 id="operator-종류">Operator 종류</h3>
    <ul>
      <li>= (할당 연산자, assignment operator)</li>
      <li>
        <ul>
          <li>
            <ul>
              <li>
                <ul>
                  <li>(이진 산술 연산자, binary arithmetic operators)</li>
                </ul>
              </li>
            </ul>
          </li>
        </ul>
      </li>
      <li>+= -= = (복합 할당 연산자, compound assignment operators)</li>
      <li>== != (비교 연산자, comparison operators)</li>
    </ul>
  </li>
</ul>

<h2 id="예제">예제</h2>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class MyClass {
  public:
  ...
  MyClass &amp; operator=(const MyClass &amp;rhs);
  ...
}

MyClass a, b;
...
b = a;   // b.operator=(a); 와 동일함
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>MyClass&amp; MyClass::operator=(const MyClass &amp;rhs) {
    // 자기 할당을 확인합니다.
    if (this == &amp;rhs)      // 동일 객체?
        return *this;        // 맞네요. 그럼 할당을 건너뛰고 *this를 반환합니다.

    ... // 할당 해제, 새 공간을 할당하고 값을 복사합니다...

    return *this;
}
</code></pre></div></div>

<h1 id="example-3">Example 3</h1>

<blockquote>
  <p>main.cpp</p>
</blockquote>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#include &lt;iostream&gt;
#include "integer.h"

using namespace std;
/* CONVERT constructor - overloading operators */
int main()
{
    Integer a(50);

    int b = a;
    a = 100;
    cout &lt;&lt; a.getNr() &lt;&lt; endl; //100
    cout &lt;&lt; b &lt;&lt; endl; // 50

    cout &lt;&lt; a + b &lt;&lt; endl; //150

    b += a; // a = a + b;

    cout &lt;&lt; b &lt;&lt; endl; // 150

    cout &lt;&lt; a &lt;&lt; endl; // 100

    return 0;
}

</code></pre></div></div>
<blockquote>
  <p>interger.h</p>
</blockquote>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#ifndef INTEGER_H_INCLUDED
#define INTEGER_H_INCLUDED

class Integer
{
    int nr;
    public:
        Integer() { };
        Integer(int);
        operator int();
        int operator+=(Integer);
        int getNr() { return nr; };
};


#endif // INTEGER_H_INCLUDED

</code></pre></div></div>

<blockquote>
  <p>interger.cpp</p>
</blockquote>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#include "integer.h"
#include &lt;iostream&gt;

using namespace std;
Integer::Integer(int nr)
{
    this-&gt;nr = nr;
}
Integer::operator int()
{
    return this-&gt;nr;
}
int Integer::operator+=(Integer o)
{
    this-&gt;nr = o.getNr() + this-&gt;nr; //this는 오퍼레이터에서 받아지는 인수값이다. 그리고 o 는 그 뒤에 받아지는 값
    return this-&gt;nr; // 여로 들면 a+=b라고 했을떄 a값이 this이고 b값이 integer o라고 보면 된다.
}

</code></pre></div></div>
:ET