I"@	<h1 id="standard-template-library-stl"><a href="https://modoocode.com/223">Standard Template Library (STL)</a></h1>
<ul>
  <li>C++ 표준 라이브러리를 보면 꽤나 많은 종류의 라이브러리들이 있습니다.</li>
  <li>대표적으로 입출력 라이브러리 (iostream 등등), 시간 관련 라이브러리 (chrono), 정규표현식 라이브러리 (regex) 등등 들이 있지요.</li>
  <li>하지만 보통 C++ 템플릿 라이브러리(STL)를 일컫는다면 다음과 같은 세 개의 라이브러리들을 의미합니다
    <ul>
      <li>임의 타입의 객체를 보관할 수 있는 컨테이너 (container)</li>
      <li>컨테이너에 보관된 원소에 접근할 수 있는 반복자 (iterator)</li>
      <li>반복자들을 가지고 일련의 작업을 수행하는 알고리즘 (algorithm)</li>
    </ul>
  </li>
  <li>EX
    <ul>
      <li>편지를 보관하는 각각의 편지함들은 ‘컨테이너’</li>
      <li>편지를 보고 원하는 편지함을 찾는 일은 ‘반복자’</li>
      <li>편지들을 편지함에 날짜 순서로 정렬하여 넣는 일은 ‘알고리즘’</li>
    </ul>
  </li>
  <li>임의 타입의 객체를 보관할 수 있는 컨테이너 (container)
    <ul>
      <li>우리가 다루려는 객체가 어떤 특성을 갖는지 무관하게 라이브러리를 자유롭게 사용할 수 있다는 것입니다 (because of Template).</li>
      <li>만일 사용하려는 자료형이 int 나 string 과 같은 평범한 애들이 아니라, 우리가 만든 임의이 클래스의 객체들이여도 자유롭게 위 라이브러리의 기능들을 모두 활용할 수 있습니다.</li>
    </ul>
  </li>
  <li>반복자의 도입으로 알고리즘 라이브러리에 필요한 최소한의 코드만을 작성할 수 있게 되었습니다.
    <ul>
      <li>존의 경우 M 개 종류의 컨테이가 있고 N 종류의 알고리즘이 있다면 이 모든 것을 지원하려면 MN 개의 알고리즘 코드가 있어야만 했습니다.</li>
      <li>반복자를 이용해서 컨테이너를 추상화 시켜서 접근할 수 있기 때문에 N 개의 알고리즘 코드 만으로 M 종류의 컨테이너들을 모두 지원할 수 있게됩니다.
        <h1 id="vector"><a href="https://modoocode.com/223">Vector</a></h1>
      </li>
    </ul>
  </li>
</ul>
:ET