I"§<h1 id="example-1-basic">Example 1 (Basic)</h1>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;

void mightGoWrong() {

	bool error1 = false;
	bool error2 = true;

	if(error1) {
		throw "Something went wrong.";
	}

	if(error2) {
		//throw string("Something else went wrong.");
		throw int ("4");
	}

}

void usesMightGoWrong() {
	mightGoWrong();
}



int main() {

	try {
		usesMightGoWrong();
	}
	catch(int e) { // the throwing the value catched and apply to "int e"
		cout &lt;&lt; "Error code: " &lt;&lt; e &lt;&lt; endl;
	}
	catch(char const * e) { // character, so it save one by one alpabet in one matrix place
		cout &lt;&lt; "Error message: " &lt;&lt; e &lt;&lt; endl;
	}
	catch(string &amp;e) { // c++ does not gracefully handle situation where there are two exceptions active at the same time in string.
	    //it imeediatley terminates the program without calling any destructor
		cout &lt;&lt; "string error message: " &lt;&lt; e &lt;&lt; endl;
	}

	cout &lt;&lt; "Still running" &lt;&lt; endl;

	return 0;
}

</code></pre></div></div>
<blockquote>
  <p>Result</p>
</blockquote>

<p><a href="https://postimg.cc/GBW2PrJ0"><img src="https://i.postimg.cc/DZZXTwSz/2321.png" width="700px" title="source: imgur.com" /><a></a></a></p>

<h1 id="example-2custom-exception">Example 2(Custom Exception)</h1>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#include &lt;iostream&gt;
#include &lt;exception&gt;

using namespace std;

class MyException: public exception {
    //public exepction, is that inherit exception class
public:
	virtual const char* what() const throw(){
	//can not throw the exception.
	//it is the optimize the way
	//it halt the time.
		return "Something bad happened!";
	}
};

class Test {
public:
	void goesWrong() {
		throw MyException();
	}
};

int main() {

	Test test;

	try {
		test.goesWrong();
	}
	catch(MyException &amp;e) {
		cout &lt;&lt; e.what() &lt;&lt; endl;
	}


	return 0;
}

</code></pre></div></div>
<blockquote>
  <p>Result</p>
</blockquote>

<p><a href="https://postimg.cc/rdL9wdz3"><img src="https://i.postimg.cc/vm42XfyY/221.png" width="700px" title="source: imgur.com" /><a></a></a></p>

<h1 id="example-3standard-exception">Example 3(standard Exception)</h1>
<p><a href="https://postimg.cc/HjBH0Xg0"><img src="https://i.postimg.cc/BQG60B7z/32132.png" width="700px" title="source: imgur.com" /><a></a></a></p>
<ul>
  <li>bad_alloic is hesitate to iostream of exception.h</li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#include &lt;iostream&gt;
using namespace std;

class CanGoWrong {
public:
	CanGoWrong() {
		char *pMemory = new char[91231312312312999999999999999]; // this is the memory to handle
		// new char[999] number of bite
		delete[] pMemory;
	}
};

int main() {

	try {
		CanGoWrong wrong;
	}
	catch(bad_alloc &amp;e) {
	    //bad_alloc is the catching up the error
	    //bad_alloc is name of class is to pick a convetnion and stick to it
		cout &lt;&lt; "Caught exception: " &lt;&lt; e.what() &lt;&lt; endl;
	}

	cout &lt;&lt; "Still running" &lt;&lt; endl;

	return 0;
}

</code></pre></div></div>
<p><a href="https://postimg.cc/TKrTDSY1"><img src="https://i.postimg.cc/y8Gxw4Mm/33.png" width="700px" title="source: imgur.com" /><a></a></a></p>

<h1 id="example-4catching-subclass-execptions">Example 4(Catching subclass Execptions)</h1>
:ET