I"/<h1 id="parsing-text-in-files">Parsing text in files</h1>
<ul>
  <li>parsing means 다이아몬드가 많이 나오는 위치로 이동을 일단 한 후에 돌을 많이 캔다음에 다이아몬드만 쏙쏙 뽑아서 보석으로 가공하는 과정
```</li>
</ul>

<p>#include <iostream>
#include <fstream>
#include <sstream></sstream></fstream></iostream></p>

<p>//sstream is <string stream="">
using namespace std;</string></p>

<p>int main() {</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>string filename = "stats.txt";
ifstream input;

input.open(filename);

if(!input.is_open()) {
	return 1;
}

while(input) {
	string line;

	getline(input, line, ':');
	// to create singe code by ':'
	// indivisual data/
	// so "line" variable get before ':' value.
	//population is the after ':' variable.

	int population;
	input &gt;&gt; population; // to give input int value to population

    input.get(); // this is for white space, whatever white space they read, but in c++ 11, use we can read white space.
	input &gt;&gt; ws;
	// ws is that Extracts and dsicards characters from the stream as long as the
	// next available character is a whitespace or unitil there are no more characters available.
	// white space is a term that refer to characters that are used for formatting purpose.
	// In C++, this refres primarily to spaces, tabs and newlines.
	// the C++ compiler generally ignores whitespace.
	if(!input) {
		break;
	}

	cout &lt;&lt; "'" &lt;&lt; line &lt;&lt; "'" &lt;&lt; " -- '" &lt;&lt; population &lt;&lt; "'" &lt;&lt; endl;
}

input.close();

return 0; }
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; Result

&lt;a href="https://postimg.cc/0rDjM9Z7"&gt;&lt;img src="https://i.postimg.cc/pV1FSTFc/332123.png" width="700px" title="source: imgur.com" /&gt;&lt;a&gt;
&lt;a href="https://postimg.cc/sQVzMR24"&gt;&lt;img src="https://i.postimg.cc/cH3L5xy2/333.png" width="700px" title="source: imgur.com" /&gt;&lt;a&gt;

# Reading and writing binary files
- Class 나 structor 에서 , instance가 list 로 되어있으면 &amp;(reference)를 사용하여 address를 가르쳐 줘야한다.
- 또한 받는 밸류 값에 대한 instance가 list 형 식이면 받는 형식은 포인터를 지정하여 address 주소에 대한 밸류를 가르킨다.
</code></pre></div></div>
<p>#include <iostream>
#include <fstream>
#include <string></string></fstream></iostream></p>

<p>using namespace std;</p>

<p>struct Data {
	char name[100];
	int age;
	double height;
};</p>

<p>int main() {</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>string filename = "data.bin";
// now we can open
Data data = { "Pixie", 120, 0.8 };

/*
 data.name = "Pixie";
 data.age = 120;
 data.height = 0.8;
 */
</code></pre></div></div>

<p>/* write binary file*/</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ofstream output;

output.open(filename);
// bitwise , bit operator

if (!output.is_open()) {
	cout &lt;&lt; "Could not create " &lt;&lt; filename &lt;&lt; endl;
}

output.write((char *) &amp;data, sizeof(data));
// pointing some data.
// &amp;data &lt;- becuase the data is  in list, so need to tell them data address
// and (char *) &lt;- it is pointer to data address for real value.
// sizeof() &lt;- in here the maens how many data we will recieve.


if (!output) {
	cout &lt;&lt; "Could not write data to file " &lt;&lt; filename &lt;&lt; endl;
}

output.close();
</code></pre></div></div>

<p>/* Read binary file*/</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ifstream input;

input.open(filename);

if (!input.is_open()) {
	cout &lt;&lt; "Could not read " &lt;&lt; filename &lt;&lt; endl;
}

Data inputData;
// 읽어드릴데이터의 함수

input.read((char *) &amp;inputData, sizeof(data));

if (!input) {
	cout &lt;&lt; "Could not read data from file " &lt;&lt; filename &lt;&lt; endl;
}

input.close();

cout &lt;&lt; inputData.name &lt;&lt; ": " &lt;&lt; inputData.age &lt;&lt; ": " &lt;&lt; inputData.height &lt;&lt; endl;

return 0; } ``` &gt; Result
</code></pre></div></div>

<p><a href="https://postimg.cc/jwPG4x87"><img src="https://i.postimg.cc/mD5BRhC8/321312313123.png" width="700px" title="source: imgur.com" /><a></a></a></p>

<h1 id="example-3standard-exception">Example 3(standard Exception)</h1>
<p><a href="https://postimg.cc/HjBH0Xg0"><img src="https://i.postimg.cc/BQG60B7z/32132.png" width="700px" title="source: imgur.com" /><a></a></a></p>
<ul>
  <li>bad_alloic is hesitate to iostream of exception.h</li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#include &lt;iostream&gt;
using namespace std;

class CanGoWrong {
public:
	CanGoWrong() {
		char *pMemory = new char[91231312312312999999999999999]; // this is the memory to handle
		// new char[999] number of bite
		delete[] pMemory;
	}
};

int main() {

	try {
		CanGoWrong wrong;
	}
	catch(bad_alloc &amp;e) {
	    //bad_alloc is the catching up the error
	    //bad_alloc is name of class is to pick a convetnion and stick to it
		cout &lt;&lt; "Caught exception: " &lt;&lt; e.what() &lt;&lt; endl;
	}

	cout &lt;&lt; "Still running" &lt;&lt; endl;

	return 0;
}

</code></pre></div></div>
<p><a href="https://postimg.cc/TKrTDSY1"><img src="https://i.postimg.cc/y8Gxw4Mm/33.png" width="700px" title="source: imgur.com" /><a></a></a></p>

<h1 id="example-4catching-subclass-execptions">Example 4(Catching subclass Execptions)</h1>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#include &lt;iostream&gt;
#include &lt;exception&gt;
using namespace std;

void goeswrong (){
    bool error1Detected = true;
    bool error2Detected = false;

    if(error1Detected){
        throw bad_alloc();
    }
    if(error2Detected){
        throw exception();
    }

}
int main(){
    try{
    goeswrong();
    }
    catch(exception &amp;e){
        cout&lt;&lt;e.what()&lt;&lt;endl;
        // what is the state of ".e"
        // like saying yeah that is std::exception.
    }

    catch(bad_alloc &amp;e){
        cout&lt;&lt;e.what()&lt;&lt;endl;
    }


    return 0;

}
</code></pre></div></div>
<p><a href="https://postimg.cc/GHwNypBP"><img src="https://i.postimg.cc/ncCtNjpW/321232.png" width="700px" title="source: imgur.com" /><a></a></a></p>
:ET