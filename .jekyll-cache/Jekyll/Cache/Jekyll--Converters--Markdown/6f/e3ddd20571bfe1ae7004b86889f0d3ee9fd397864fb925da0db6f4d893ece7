I"%<h1 id="static-variables-and-functionshttpsju3ungithubioglobal-static">(Static-Variables-and-Functions)[https://ju3un.github.io/global-static/]</h1>
<ul>
  <li>프로그래밍을 처음 배울 때 우리는 지역 변수, 전역 변수라는 용어를 흔히 들을 수 있다.</li>
  <li>지역 변수는 말그대로 정의되는 시점에서 생성되고 초기화되며, 정의된 스코프(블록)이 끝나는 지점에서 소멸한다.</li>
  <li><strong>그렇다면 전역 변수는 이름 그대로 지역 변수와는 반대로 전역에서 사용할 수 있다고 추측할 수 있다</strong></li>
</ul>

<h2 id="전역-변수global-variable와-정적-변수static-variable">전역 변수(Global Variable)와 정적 변수(Static Variable)</h2>
<ul>
  <li>이 둘의 공통점은 지역 변수와는 다르게 프로그램이 끝날 때 비로소 소멸된다는 것을 알고 있다</li>
</ul>

<h3 id="1-전역-변수global-variable">1. 전역 변수(Global Variable)</h3>
<ul>
  <li>한 번 할당된 변수의 메모리와 값은 프로그램이 종료될 때까지 유지된다. (=lifetime 프로그램 종료시.)</li>
  <li>해당 프로그램의 어느 파일, 함수에서도 접근 가능하다</li>
  <li>다른 파일에서 접근하기 위해서는 아래와 같이 extern 키워드를 사용하여 변수를 선언하고 사용해야 한다</li>
  <li>필요할 때 초기화를 언제든 몇번이든 할 수 있다.</li>
  <li>초기화를 하지 않아도 메모리가 할당된다. (초기화 시 data영역에 존재)
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>int g_iValue;           // 본문 선언
extern int g_iValue;    // 다른 파일에서 선언 후 사용
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="2-전역-변수static-variable">2. 전역 변수(Static Variable)</h3>
<ul>
  <li>한 번 할당된 변수의 메모리와 값은 프로그램이 종료될 때까지 유지된다. (=lifetime 프로그램 종료시.)</li>
  <li>해당 변수가 선언된 파일, 함수내에서만 접근 가능하다.</li>
  <li>선언 시 static 키워드를 반드시 사용해야 한다.</li>
  <li>초기화는 단 한번만 할 수 있으며 초기화는 <strong>반드시 소스 파일</strong> 에서 해야 한다.</li>
  <li>본문 / <strong>다른 파일 사용 방법은 없음(x)</strong></li>
  <li>초기화하지 않은 상태로 어느 곳에서도 사용되지 않으면 메모리가 할당되지 않는다. (초기화 시 data영역에 존재)
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>static int s_iValue;    // 본문 선언
</code></pre></div>    </div>
  </li>
  <li>해당 클래스의 모든 인스턴스들의 공통적인 공유 자원(해당 클래스가 여러 개의 객체가 생성되어도 해당 변수는 단 한번만 생성되고 초기화된다.)</li>
  <li>객체가 생성되기 전에 이미 메모리가 할당되어, 생성자에서 초기화해줄 수 없다.</li>
  <li>각 인스턴스의 귀속 값이 아니기 때문에 호출 시, 클래스명을 명시하여 호출하는 것이 올바르다.</li>
  <li>C++에서 정적 멤버란 클래스에는 속하지만, 객체 별로 할당되지 않고 클래스의 모든 객체가 공유하는 멤버를 의미합니다.</li>
  <li><strong>멤버 변수가 정적(static)으로 선언되면, 해당 클래스의 모든 객체에 대해 하나의 데이터만이 유지 관리됩니다.</strong></li>
  <li>정적 멤버 변수는 클래스 영역에서 선언되지만, 정의는 파일 영역에서 수행됩니다.</li>
  <li>이러한 정적 멤버 변수는 외부 연결(external linkage)을 가지므로, 여러 파일에서 접근할 수 있습니다</li>
  <li><strong>정적 멤버 변수에도 클래스 멤버의 접근 제한 규칙이 적용되므로, 클래스의 멤버 함수나 프렌드만이 접근할 수 있습니다.</strong></li>
  <li><strong>하지만 정적 멤버 변수를 외부에서도 접근할 수 있게 하고 싶으면, 정적 멤버 변수를 public 영역에 선언하면 됩니다.</strong></li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>this.m_iValue   // (x)
Price::m_iValue // (o) 올바른 표현
</code></pre></div></div>

<blockquote>
  <p>예제
```
class Person</p>
</blockquote>

<p>{</p>

<p>private:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>string name_;

int age_;
</code></pre></div></div>

<p>public:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>static int person_count_;            // 정적 멤버 변수의 선언

Person(const string&amp; name, int age); // 생성자

~Person() { person_count_--; }       // 소멸자

void ShowPersonInfo();
</code></pre></div></div>

<p>};</p>

<p>…</p>

<p>int Person::person_count_ = 0; // 정적 멤버 변수의 정의 및 초기화</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
&gt; 실행 결과
</code></pre></div></div>
<p>1 번째 사람이 생성되었습니다.</p>

<p>이 사람의 이름은 길동이고, 나이는 29살입니다.</p>

<p>2 번째 사람이 생성되었습니다.</p>

<p>이 사람의 이름은 순신이고, 나이는 35살입니다.</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
## (정적 함수)[http://tcpschool.com/cpp/cpp_encapsulation_staticConst]
- C++에서는 클래스의 멤버 함수도 정적(static)으로 선언할 수 있습니다.
- 이렇게 선언된 정적 멤버 함수는 해당 클래스의 객체를 생성하지 않고도, 클래스 이름만으로 호출할 수 있습니다.
- 정적 멤버 함수는 정적 멤버 변수를 선언하는 방법과 같이 static 키워드를 사용하여 선언합니다.
- 이러한 정적 멤버 함수는 다음과 같은 특징을 갖습니다.
  1. 객체를 생성하지 않고 클래스 이름만으로 호출할 수 있습니다.
  2. 객체를 생성하지 않으므로, this 포인터를 가지지 않습니다
  3. 특정 객체와 결합하지 않으므로, 정적 멤버 변수밖에 사용할 수 없습니다.

&gt; 예제

</code></pre></div></div>
<p>class Person</p>

<p>{</p>

<p>private:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>string name_;

int age_;
</code></pre></div></div>

<p>public:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>static int person_count_;            // 정적 멤버 변수의 선언

static int person_count();           // 정적 멤버 함수의 선언

Person(const string&amp; name, int age); // 생성자

~Person() { person_count_--; }       // 소멸자

void ShowPersonInfo();
</code></pre></div></div>

<p>};</p>

<p>…</p>

<p>int Person::person_count_ = 0; // 정적 멤버 변수의 정의 및 초기화</p>

<p>…</p>

<p>int Person::person_count()     // 정적 멤버 함수의 정의</p>

<p>{</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>return person_count_;
</code></pre></div></div>

<p>}</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
&gt; 실행 결과

</code></pre></div></div>
<p>1 번째 사람이 생성되었습니다.</p>

<p>2 번째 사람이 생성되었습니다.</p>

<p>현재까지 생성된 총 인원 수는 2명입니다.</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>

# Exercise
&gt; Main.cpp

</code></pre></div></div>
<p>#include <iostream>
#include "user.h"</iostream></p>

<p>using namespace std;
/*static properties and static methods */</p>

<p>int main()
{</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cout &lt;&lt; User::getCounter() &lt;&lt; endl;

return 0; }
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
&gt; farm.h

</code></pre></div></div>
<p>#ifndef FARM_H_INCLUDED
#define FARM_H_INCLUDED
#include <iostream></iostream></p>

<p>using namespace std;</p>

<p>class Animal
{
        protected:
            string voice;
        public:
            Animal();
            ~Animal();
            virtual string getVoice() = 0; // 가상함수로 선언하여 유도 클래스 Getvoice를 쓸 수 있게 함
};
class Dog : public Animal
{
            string sign;
        public:
            Dog();
            ~Dog();
            string getVoice() { return voice + “ “ + sign; }
};
class Cat : public Animal
{
            string sign;
        public:
            Cat();
            ~Cat();
            string getVoice() { return voice  + “ “ +  sign; }
};
class Cow : public Animal
{
            string sign;
        public:
            Cow();
            ~Cow();
            string getVoice() { return voice  + “ “ +  sign; }
};</p>

<p>#endif // FARM_H_INCLUDED</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
&gt; farm.cpp

</code></pre></div></div>
<p>#include “farm.h”</p>

<p>Animal::~Animal()
{</p>

<p>}
Dog::Dog()
{
    sign = “D”;
    voice = “hau”;
}
Dog::~Dog()
{</p>

<p>}
Cat::Cat()
{
    sign = “C”;
    voice = “meow”;
}
Cat::~Cat()
{</p>

<p>}
Cow::Cow()
{
    sign = “CO”;
    voice = “moooo”;
}
Cow::~Cow()
{</p>

<p>}</p>

<p>```</p>
:ET