I"^<h1 id="example-1">Example 1</h1>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
</span>
<span class="n">using</span> <span class="n">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="cm">/*
        AND conjunction &amp;&amp;

        7 &gt; 5 &amp;&amp; 5 != 10 //conjunction is true ONLY if both expressions are true

        expr1 expr2 result
          0     0     0
          0     1     0
          1     0     0
          1     1     1

        OR disjunction || (alternative)

        disjunction is false ONLY when both expressions are false

        expr1 expr2 result
          0     0     0
          0     1     1
          1     0     1
          1     1     1

        ! (exclemation mark) - NOT

        ! (0) the result will be 1
        ! (1) the result will be 0
    */</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">!</span><span class="p">(</span><span class="mi">5</span> <span class="o">&gt;</span> <span class="mi">7</span> <span class="o">||</span> <span class="mi">5</span> <span class="o">!=</span> <span class="mi">10</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>


<span class="p">}</span>

</code></pre></div></div>

<h1 id="example-2">Example 2</h1>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#include &lt;iostream&gt;

using namespace std;

main() {

    int minValue, maxValue, elementToCheck;
    bool isContained;

    cout &lt;&lt; "Please input the minimum value: ";
    cin &gt;&gt; minValue;
    cout &lt;&lt; "Please input the maximum value: ";
    cin &gt;&gt; maxValue;
    cout &lt;&lt; "Please input the number to check: ";
    cin &gt;&gt; elementToCheck;

    isContained = (minValue &lt;= elementToCheck) &amp;&amp; (elementToCheck &lt;= maxValue);
    cout &lt;&lt; "Is the number " &lt;&lt; elementToCheck &lt;&lt; " contained in the interval from " &lt;&lt; minValue &lt;&lt; " to " &lt;&lt; maxValue &lt;&lt; " ? " &lt;&lt; isContained;

}

</code></pre></div></div>

<h1 id="example-3">Example 3</h1>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#include &lt;iostream&gt;

using namespace std;

main() {

    int minValue, maxValue, elementToCheck;
    bool isGreaterThanMinValue, isLowerThanMaxValue;

    cout &lt;&lt; "Please input the minimum value: ";
    cin &gt;&gt; minValue;
    cout &lt;&lt; "Please input the maximum value: ";
    cin &gt;&gt; maxValue;
    cout &lt;&lt; "Please input the number to check: ";
    cin &gt;&gt; elementToCheck;

    isGreaterThanMinValue = (minValue &lt;= elementToCheck);
    isLowerThanMaxValue = (elementToCheck &lt;= maxValue);

    cout &lt;&lt; "Is the value " &lt;&lt; elementToCheck &lt;&lt; " greater or equal to " &lt;&lt; minValue &lt;&lt; " ? " &lt;&lt; isGreaterThanMinValue &lt;&lt; endl;
    cout &lt;&lt; "Is the value " &lt;&lt; elementToCheck &lt;&lt; " lower or equal to " &lt;&lt; maxValue &lt;&lt; " ? " &lt;&lt; isLowerThanMaxValue &lt;&lt; endl;



}
</code></pre></div></div>

<h1 id="example-4">Example 4</h1>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#include &lt;iostream&gt;

using namespace std;

main()
{
    /*
        0
        1
        0101 0110

        1 2 6 = 1 * 10 ^ 2 + 2 * 10 ^ 1 + 6 * 10 ^ 0 = 100 + 20 + 6

        1 0 1 0 = 2 ^ 3 + 2 ^ 1 = 8 + 2 = 10

        1 0 1 1 0 0 = 2 ^ 2 + 2 ^ 3 + 2 ^ 5 = 4 + 8 + 32 = 44
    */
    /*
        Bitwise AND - &amp;
        Bitwise OR - |
        Bitwise NOT - ~ (tilde)
        Bitwise XOR - ^ (caret) eXclusive OR.
        0 0 0
        0 1 1
        1 0 1
        1 1 0
        Bitwise left shift &lt;&lt;
        Bitwise right shift &gt;&gt;
    */

    cout &lt;&lt; (10 &amp; 2) &lt;&lt; endl;

    /*
        1 0 1 0
        0 0 1 0
        -------
        0 0 1 0
    */
    cout &lt;&lt; (10 | 2) &lt;&lt; endl;

    /*
        1 0 1 0
        0 0 1 0
        -------
        1 0 1 0
    */
    cout &lt;&lt; (10 ^ 2) &lt;&lt; endl;

    /*
        1 0 1 0
        0 0 1 0
        -------
        1 0 0 0
    */

    cout &lt;&lt; (~10) &lt;&lt; endl;

    /*
         000000000000000000000000000000000000 1 0 1 0
         111111111111111111111111111111111111 0 1 0 1
    */

    cout &lt;&lt; (10 &lt;&lt; 3) &lt;&lt; endl; //this thing means that we are multiplying 10 by 2 raised to the power of 3
    /*
        000000000000000000000000000000000001 0 1 0 0
        20 - decimal notation
        40
    */

    cout &lt;&lt; (10 &gt;&gt; 1) &lt;&lt; endl; //this thing means that we are dividing 10 by 2 raised to the power of 3
    /*
        00000000000000000000000000000000000 0 1 0 1
        5
    */
}

</code></pre></div></div>
:ET