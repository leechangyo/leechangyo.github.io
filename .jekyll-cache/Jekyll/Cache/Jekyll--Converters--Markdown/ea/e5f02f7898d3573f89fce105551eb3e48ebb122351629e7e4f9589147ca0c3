I"Ÿ<h1 id="copy-constructor">Copy Constructor</h1>
<blockquote>
  <p>Main.cpp</p>
</blockquote>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#include &lt;iostream&gt;
#include "test.h"

using namespace std;
/* COPY CONSTRUCTOR */

int main()
{

    int a = 10;
    int b = a;

    a = 60;

    cout &lt;&lt; "a : " &lt;&lt; a &lt;&lt; endl; //60
    cout &lt;&lt; "b : " &lt;&lt; b &lt;&lt; endl; //10

    Test obj1(50, 100, 60);
    Test obj2 = obj1;

    obj2.x = 200;
    *(obj1.p) = 700;

    cout &lt;&lt; "obj1.x " &lt;&lt; obj1.x &lt;&lt; endl;
    cout &lt;&lt; "*(obj1.p) " &lt;&lt; *(obj1.p) &lt;&lt; endl;
    cout &lt;&lt; "obj1.y " &lt;&lt; obj1.y &lt;&lt; endl &lt;&lt; endl;

    cout &lt;&lt; "obj2.x " &lt;&lt; obj2.x &lt;&lt; endl;
    cout &lt;&lt; "*(obj2.p)" &lt;&lt; *(obj2.p) &lt;&lt; endl;
    cout &lt;&lt; "obj2.y " &lt;&lt; obj2.y &lt;&lt; endl;


    return 0;
}


</code></pre></div></div>

<blockquote>
  <p>test.h</p>
</blockquote>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#ifndef TEST_H_INCLUDED
#define TEST_H_INCLUDED

class Test
{
    public:
        int x; //50
        int y; //100
        int *p; //60
        Test(const Test &amp;); //copy
        Test(int, int, int);
        ~Test();
};

#endif // TEST_H_INCLUDED

</code></pre></div></div>

<blockquote>
  <p>test.cpp</p>
</blockquote>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#include "test.h"

Test::Test(int x, int y, int value)
{
        this-&gt;x = x;
        this-&gt;y = y;
        this-&gt;p = new int(value); // because of in head file p is the *pointer
}
Test::~Test()
{
        delete p;
}
Test::Test(const Test &amp; obj) //copy
{
    this-&gt;p = new int(*(obj.p)); //because of in head file p is the *pointer
    this-&gt;x = obj.x;
    this-&gt;y = obj.y;
}

</code></pre></div></div>

<ul>
  <li>CONSTRUCTOR</li>
</ul>
:ET