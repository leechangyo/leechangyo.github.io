I"r<h1 id="maps"><a href="https://twpower.github.io/91-how-to-use-map-in-cpp">Maps</a></h1>
<ul>
  <li>기본형태
    <ul>
      <li>map&lt;key,value&gt; : key와 value를 pair 형태로 선언합니다.</li>
    </ul>
  </li>
  <li>iterator(반복자)
    <ul>
      <li>begin() : beginning iterator를 반환
        <ul>
          <li>end() : end iterator를 반환</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>추가 및 삭제
    <ul>
      <li>insert( make_pair(key,value) ) : 맵에 원소를 pair 형태로 추가
        <ul>
          <li>erase(key) : 맵에서 key(키값)에 해당하는 원소 삭제</li>
          <li>clear() : 맵의 원소들 모두 삭제</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>조회
    <ul>
      <li>find(key) : key(키값)에 해당하는 iterator를 반환
        <ul>
          <li>count(key) : key(키값)에 해당하는 원소들(value들)의 개수를 반환</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>기타
    <ul>
      <li>empty() : 맵이 비어있으면 true 아니면 false를 반환
        <ul>
          <li>size() : 맵 원소들의 수를 반환
```
#include <iostream>
#include &lt;map&gt;
#include <string></string></iostream></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p>using namespace std;</p>

<p>int main() {</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>map&lt;string, int&gt; ages;

ages["Mike"] = 40;
ages["Raj"] = 20;
ages["Vicky"] = 30;

ages["Mike"] = 70;
//
ages.insert(make_pair("Peter", 100));
//pair&lt;string, int&gt; addToMap("peter",100);
//ages.insert(addToMap);

cout &lt;&lt; ages["Raj"] &lt;&lt; endl;
// to find the techinical
if(ages.find("Vicky") != ages.end()) {
	cout &lt;&lt; "Found Vicky" &lt;&lt; endl;
}
else {
	cout &lt;&lt; "Key not found." &lt;&lt; endl;
}

for(map&lt;string, int&gt;::iterator it = ages.begin(); it != ages.end(); it++) {
	pair&lt;string, int&gt; age = *it;

	cout &lt;&lt; age.first &lt;&lt; ": " &lt;&lt; age.second &lt;&lt; endl;
	// first and second the function in the map library
}

for(map&lt;string, int&gt;::iterator it = ages.begin(); it != ages.end(); it++) {
		cout &lt;&lt; it-&gt;first &lt;&lt; ": " &lt;&lt; it-&gt;second &lt;&lt; endl;
		// first and second is valuable the value of the ages by key and value.

	}


return 0; }
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; Result

&lt;a href="https://postimg.cc/cthhZC1w"&gt;&lt;img src="https://i.postimg.cc/NLqz62WJ/323131232.png" width="700px" title="source: imgur.com" /&gt;&lt;a&gt;

# Custom Objects as map Keys
## [Flush](https://support.microsoft.com/ko-kr/help/94227/how-to-flush-the-cout-buffer-in-visual-c)
- 개발 된 Microsoft C/c + + 응용 프로그램에서는 cout 스트림 버퍼링 됩니다.
- **즉, 버퍼를 플러시할 때까지 cout 스트림에 보낼 정보가 화면에 나타나지 않습니다.**
- 이 동작은 Visual C++ 4.2 및 이후 버전의 경우 이전 iostream 라이브러리를 사용할 때만 발생 합니다.
- 네 가지 방법을 다음과 같이 cout 버퍼를 플러시할 수 있습니다.
  - Endl 조작자를 사용 하 여 줄 바꿈 문자를 출력 스트림에 삽입 버퍼를 플러시합니다. Endl 조작자를 사용 하 여 삽입 연산자를 다음과 같이 사용.
	  - cout &lt;&lt; ... &lt;&lt; endl;
	- Ostream 클래스 또는 플러시 조작자에 플러시 멤버 함수를 사용 합니다.
	- 플러시 조작자 버퍼를 플러시합니다 **전에 스트림에 줄 바꿈 문자가 삽입 되지는 않습니다.** 플러시 멤버 함수를 호출 하려면 다음과 유사한 코드를 사용.
	  - cout.flush();
	- 플러시 조작자를 사용 하 여 삽입 연산자를 다음과 같이 사용.
	  - cout &lt;&lt; ... &lt;&lt; flush;

## [First and Second 함수](http://soen.kr/lecture/ccpp/cpp4/41-1-1.htm)
- 구조체 템플릿 std::pair 는 두 가지 유형의 정확히 두 개의 반환 값을 함께 묶을 수 있습니다

</code></pre></div></div>
<p>#include <utility>
std::pair&lt;int, int&gt; foo(int a, int b) {
    return std::make_pair(a+b, a-b);
}</utility></p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- C ++ 11 이후 버전에서는 std::make_pair 대신에 초기화리스트를 사용할 수 있습니다 :

</code></pre></div></div>
<p>#include <utility>
std::pair&lt;int, int&gt; foo(int a, int b) {
    return {a+b, a-b};
}</utility></p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
- 쌍의 first 및 second 구성원 개체를 사용하여 반환 된 std::pair 의 개별 값을 검색 할 수 있습니다.

</code></pre></div></div>
<p>std::pair&lt;int, int&gt; mrvs = foo(5, 12);
std::cout « mrvs.first + mrvs.second « std::endl;</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
## Example
- Map&lt;person, int&gt; people
- Person first map and value is second map
- Ex) [Person1, value1] [person2,value2]...
</code></pre></div></div>
<p>#include <iostream>
#include &lt;map&gt;
#include <string></string></iostream></p>

<p>using namespace std;</p>

<p>class Person {
private:
	string name;
	int age;</p>

<p>public:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Person() :
		name(""), age(0) {

}

Person(string name, int age) :
		name(name), age(age) {

}
// 상속
//constructor need to initialize this
//so thats why we use to initilaze the actual instance(기억장치 할당) variables in above
//we dont have to provide any more implementation(실행)


Person(const Person&amp; other) {
	name = other.name;
	age = other.age;
}

//copy constoctur.

void print() const {
	cout &lt;&lt; name &lt;&lt; ": " &lt;&lt; age &lt;&lt; flush;
}

//operator is just like +,-,&lt;,&gt;,！= 지정해주는
// 리퍼런스 other에 대신 데이터를 받아 가동을 시켜준다.
bool operator&lt;(const Person &amp;other) const {

	if (name == other.name) {
		return age &lt; other.age;
	} else {
		return name &lt; other.name;
	}
} };
</code></pre></div></div>

<p>int main() {
	map&lt;Person, int&gt; people;
	//map&lt;key,value&gt;</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>people[Person("Mike", 40)] = 40;
people[Person("Mike", 444)] = 123;
people[Person("Sue", 30)] = 30;
people[Person("Raj", 40)] = 20;

for (map&lt;Person, int&gt;::iterator it = people.begin(); it != people.end();
		it++) {
	cout &lt;&lt; it-&gt;second &lt;&lt; ": " &lt;&lt; flush;
	it-&gt;first.print();
	cout &lt;&lt; endl;
}
// it need to bool operation becuase
return 0; }
</code></pre></div></div>

<p>```</p>
:ET