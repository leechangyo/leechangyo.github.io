I"ÿQ<h1 id="ros-navigation-stack">ROS Navigation stack</h1>
<ul>
  <li>2D Navigation</li>
  <li>inputs:
    <ul>
      <li>Odometry</li>
      <li>Sensor data</li>
      <li>Goal Pose</li>
    </ul>
  </li>
  <li>Output:
    <ul>
      <li>safe velocity commands</li>
    </ul>
  </li>
  <li>only for differential drive or holonomic wheeled robots</li>
  <li>requires a planar laser</li>
  <li>performs best on square or circular robots</li>
  <li>ROS topics : Transport information between nodes</li>
</ul>

<h2 id="move_base">Move_base</h2>
<ul>
  <li>provides an implementation of an action
    <ul>
      <li>Actions are used for long term tasks</li>
    </ul>
  </li>
  <li>Uses a global and local planner to accomplish its global navigation goal</li>
  <li>Manages communication between the components of the navigation stack</li>
</ul>

<h2 id="rviz">Rviz</h2>
<ol>
  <li>Under Global options on the left side panel for fixed frame, change base_link or base_footprint to Odom</li>
  <li>click on Add and select the by topic tab</li>
  <li>choose odometry and click on OK</li>
</ol>

<h2 id="navigation-necessary">Navigation necessary</h2>
<ol>
  <li>Map of the environment
    <ul>
      <li>use a pre-existing map</li>
      <li>built by the robot itself during a mapping process</li>
    </ul>
    <ul>
      <li>this process is called SLAM
        <ul>
          <li>‚Äúgmapping‚Äù</li>
        </ul>
      </li>
      <li>simultaneous Localization and mapping</li>
      <li>it gathers information about the environment using laser scanning</li>
    </ul>
  </li>
  <li>Localization
    <ul>
      <li>Global methods</li>
    </ul>
    <ul>
      <li>GPS accuracy ~3.5m</li>
      <li>Wi-Fi hotspot accuracy ~40m</li>
      <li>cell towers accuracy ~600m
      - Local methods</li>
      <li>laser can accuracy ~5cm</li>
      <li>cameras accuracy ~10cm</li>
    </ul>
  </li>
  <li>Path planning</li>
  <li>Obstacle avoidance</li>
</ol>

<h1 id="exercise">Exercise</h1>

<blockquote>
  <p>Create unknown_obstacle.py</p>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python
</span><span class="kn">import</span> <span class="nn">rospy</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="c1"># Import the spawn urdf model service from Gazebo.
</span><span class="kn">from</span> <span class="nn">gazebo_msgs.srv</span> <span class="kn">import</span> <span class="n">SpawnModel</span><span class="p">,</span> <span class="n">SpawnModelRequest</span><span class="p">,</span> <span class="n">GetModelProperties</span><span class="p">,</span> <span class="n">GetModelPropertiesRequest</span>
<span class="kn">from</span> <span class="nn">geometry_msgs.msg</span> <span class="kn">import</span> <span class="n">Pose</span>

<span class="k">def</span> <span class="nf">spawn_unknown_obstacle</span><span class="p">(</span><span class="n">obstacle_name</span><span class="p">,</span> <span class="n">obstacle_model_xml</span><span class="p">,</span> <span class="n">obstacle_pose</span><span class="p">):</span>
  <span class="c1"># Service proxy to spawn urdf object in Gazebo.
</span>  <span class="n">spawn_obstacle_service</span> <span class="o">=</span> <span class="n">rospy</span><span class="o">.</span><span class="n">ServiceProxy</span><span class="p">(</span><span class="s">'/gazebo/spawn_urdf_model'</span><span class="p">,</span> <span class="n">SpawnModel</span><span class="p">)</span>
  <span class="c1"># Create service request.
</span>  <span class="n">spawn_obstacle_request</span> <span class="o">=</span> <span class="n">SpawnModelRequest</span><span class="p">()</span>
  <span class="n">spawn_obstacle_request</span><span class="o">.</span><span class="n">model_name</span> <span class="o">=</span> <span class="n">obstacle_name</span>
  <span class="n">spawn_obstacle_request</span><span class="o">.</span><span class="n">model_xml</span> <span class="o">=</span> <span class="n">obstacle_model_xml</span>
  <span class="n">spawn_obstacle_request</span><span class="o">.</span><span class="n">robot_namespace</span> <span class="o">=</span> <span class="s">''</span>
  <span class="n">spawn_obstacle_request</span><span class="o">.</span><span class="n">initial_pose</span> <span class="o">=</span> <span class="n">obstacle_pose</span>
  <span class="n">spawn_obstacle_request</span><span class="o">.</span><span class="n">reference_frame</span> <span class="o">=</span> <span class="s">'map'</span>
  <span class="c1"># Call spawn model service.
</span>  <span class="n">spawn_obstacle_response</span> <span class="o">=</span> <span class="n">spawn_obstacle_service</span><span class="p">(</span><span class="n">spawn_obstacle_request</span><span class="p">)</span>
  <span class="k">if</span><span class="p">(</span><span class="ow">not</span> <span class="n">spawn_obstacle_response</span><span class="o">.</span><span class="n">success</span><span class="p">):</span>
    <span class="n">rospy</span><span class="o">.</span><span class="n">logerr</span><span class="p">(</span><span class="s">'Could not spawn unknown obstacle'</span><span class="p">)</span>
    <span class="n">rospy</span><span class="o">.</span><span class="n">logerr</span><span class="p">(</span><span class="n">spawn_obstacle_response</span><span class="o">.</span><span class="n">status_message</span><span class="p">)</span>
  <span class="k">else</span><span class="p">:</span>
    <span class="n">rospy</span><span class="o">.</span><span class="n">loginfo</span><span class="p">(</span><span class="n">spawn_obstacle_response</span><span class="o">.</span><span class="n">status_message</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">check_obstacle_existence</span><span class="p">(</span><span class="n">obstacle_name</span><span class="p">):</span>
  <span class="c1"># Service proxy to spawn urdf object in Gazebo.
</span>  <span class="n">check_obstacle_service</span> <span class="o">=</span> <span class="n">rospy</span><span class="o">.</span><span class="n">ServiceProxy</span><span class="p">(</span><span class="s">'/gazebo/get_model_properties'</span><span class="p">,</span> <span class="n">GetModelProperties</span><span class="p">)</span>

  <span class="n">check_obstacle_response</span> <span class="o">=</span> <span class="n">check_obstacle_service</span><span class="p">(</span><span class="n">obstacle_name</span><span class="p">)</span>
  <span class="k">return</span> <span class="n">check_obstacle_response</span><span class="o">.</span><span class="n">success</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
  <span class="k">try</span><span class="p">:</span>
    <span class="c1"># Initialize a ROS Node
</span>    <span class="n">rospy</span><span class="o">.</span><span class="n">init_node</span><span class="p">(</span><span class="s">'spawn_unknown_obstacle'</span><span class="p">)</span>
    <span class="c1">#Get file name of the object to be spawned.
</span>    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">"HOME"</span><span class="p">],</span> <span class="s">"hrwros_ws/src/hrwros_support/urdf/unknown_obstacle/unknown_obstacle.urdf"</span><span class="p">),</span> <span class="s">"r"</span><span class="p">)</span> <span class="k">as</span> <span class="n">box_file</span><span class="p">:</span>
      <span class="n">box_xml</span> <span class="o">=</span> <span class="n">box_file</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
    <span class="c1"># Wait for a couple of seconds to prevent the unknown obstacle from being
</span>    <span class="c1"># considered as a part of the map.
</span>    <span class="n">rospy</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>

    <span class="k">if</span> <span class="ow">not</span> <span class="n">check_obstacle_existence</span><span class="p">(</span><span class="s">'unknown_obstacle1'</span><span class="p">):</span>
      <span class="c1"># First obstacle.
</span>      <span class="n">obstacle1_pose</span> <span class="o">=</span> <span class="n">Pose</span><span class="p">()</span>
      <span class="n">obstacle1_pose</span><span class="o">.</span><span class="n">position</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="o">-</span><span class="mf">1.0</span>
      <span class="n">obstacle1_pose</span><span class="o">.</span><span class="n">position</span><span class="o">.</span><span class="n">y</span> <span class="o">=</span> <span class="mf">1.2</span>
      <span class="n">obstacle1_pose</span><span class="o">.</span><span class="n">position</span><span class="o">.</span><span class="n">z</span> <span class="o">=</span> <span class="mf">0.0</span>
      <span class="n">obstacle1_pose</span><span class="o">.</span><span class="n">orientation</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="mf">0.0</span>
      <span class="n">obstacle1_pose</span><span class="o">.</span><span class="n">orientation</span><span class="o">.</span><span class="n">y</span> <span class="o">=</span> <span class="mf">0.0</span>
      <span class="n">obstacle1_pose</span><span class="o">.</span><span class="n">orientation</span><span class="o">.</span><span class="n">z</span> <span class="o">=</span> <span class="mf">0.0</span>
      <span class="n">obstacle1_pose</span><span class="o">.</span><span class="n">orientation</span><span class="o">.</span><span class="n">w</span> <span class="o">=</span> <span class="mf">1.0</span>
      <span class="n">spawn_unknown_obstacle</span><span class="p">(</span><span class="s">'unknown_obstacle1'</span><span class="p">,</span> <span class="n">box_xml</span><span class="p">,</span> <span class="n">obstacle1_pose</span><span class="p">)</span>

    <span class="k">if</span> <span class="ow">not</span> <span class="n">check_obstacle_existence</span><span class="p">(</span><span class="s">'unknown_obstacle2'</span><span class="p">):</span>
      <span class="c1"># Second obstacle.
</span>      <span class="n">obstacle2_pose</span> <span class="o">=</span> <span class="n">Pose</span><span class="p">()</span>
      <span class="n">obstacle2_pose</span><span class="o">.</span><span class="n">position</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="o">-</span><span class="mf">1.0</span>
      <span class="n">obstacle2_pose</span><span class="o">.</span><span class="n">position</span><span class="o">.</span><span class="n">y</span> <span class="o">=</span> <span class="mf">3.0</span>
      <span class="n">obstacle2_pose</span><span class="o">.</span><span class="n">position</span><span class="o">.</span><span class="n">z</span> <span class="o">=</span> <span class="mf">0.0</span>
      <span class="n">obstacle2_pose</span><span class="o">.</span><span class="n">orientation</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="mf">0.0</span>
      <span class="n">obstacle2_pose</span><span class="o">.</span><span class="n">orientation</span><span class="o">.</span><span class="n">y</span> <span class="o">=</span> <span class="mf">0.0</span>
      <span class="n">obstacle2_pose</span><span class="o">.</span><span class="n">orientation</span><span class="o">.</span><span class="n">z</span> <span class="o">=</span> <span class="mf">0.0</span>
      <span class="n">obstacle2_pose</span><span class="o">.</span><span class="n">orientation</span><span class="o">.</span><span class="n">w</span> <span class="o">=</span> <span class="mf">1.0</span>
      <span class="n">spawn_unknown_obstacle</span><span class="p">(</span><span class="s">'unknown_obstacle2'</span><span class="p">,</span> <span class="n">box_xml</span><span class="p">,</span> <span class="n">obstacle2_pose</span><span class="p">)</span>

  <span class="k">except</span> <span class="n">rospy</span><span class="o">.</span><span class="n">ROSInterruptException</span><span class="p">:</span>
    <span class="n">rospy</span><span class="o">.</span><span class="n">loginfo</span><span class="p">(</span><span class="s">"Interrupt received to stop ROS node."</span><span class="p">)</span>

</code></pre></div></div>

<blockquote>
  <p>move.py</p>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python
</span><span class="kn">import</span> <span class="nn">rospy</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="c1"># Brings in the SimpleActionClient
</span><span class="kn">import</span> <span class="nn">actionlib</span>
<span class="kn">from</span> <span class="nn">actionlib_msgs.msg</span> <span class="kn">import</span> <span class="n">GoalStatus</span>

<span class="c1"># Brings in the messages used by the MoveBase action, including the
# goal message and the result message.
</span><span class="kn">from</span> <span class="nn">move_base_msgs.msg</span> <span class="kn">import</span> <span class="n">MoveBaseAction</span><span class="p">,</span> <span class="n">MoveBaseGoal</span><span class="p">,</span> <span class="n">MoveBaseResult</span><span class="p">,</span> <span class="n">MoveBaseActionResult</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="c1"># Initialize a ROS Node
</span>        <span class="n">rospy</span><span class="o">.</span><span class="n">init_node</span><span class="p">(</span><span class="s">'move_turtlebot'</span><span class="p">)</span>
        <span class="c1"># Create a SimpleActionClient for the move_base action server.
</span>        <span class="n">turtlebot_navigation_client</span> <span class="o">=</span> <span class="n">actionlib</span><span class="o">.</span><span class="n">SimpleActionClient</span><span class="p">(</span><span class="s">'move_base'</span><span class="p">,</span> <span class="n">MoveBaseAction</span><span class="p">)</span>
        <span class="c1"># Wait until the move_base action server becomes available.
</span>        <span class="n">rospy</span><span class="o">.</span><span class="n">loginfo</span><span class="p">(</span><span class="s">"Waiting for move_base action server to come up..."</span><span class="p">)</span>
        <span class="n">turtlebot_navigation_client</span><span class="o">.</span><span class="n">wait_for_server</span><span class="p">()</span>
        <span class="n">rospy</span><span class="o">.</span><span class="n">loginfo</span><span class="p">(</span><span class="s">"move_base action server is available..."</span><span class="p">)</span>
        <span class="c1"># Creates a goal to send to the action server.
</span>        <span class="n">turtlebot_robot1_goal</span> <span class="o">=</span> <span class="n">MoveBaseGoal</span><span class="p">()</span>
        <span class="c1"># Construct the target pose for the turtlebot in the "map" frame.
</span>        <span class="n">turtlebot_robot1_goal</span><span class="o">.</span><span class="n">target_pose</span><span class="o">.</span><span class="n">header</span><span class="o">.</span><span class="n">stamp</span> <span class="o">=</span> <span class="n">rospy</span><span class="o">.</span><span class="n">Time</span><span class="o">.</span><span class="n">now</span><span class="p">()</span>
        <span class="n">turtlebot_robot1_goal</span><span class="o">.</span><span class="n">target_pose</span><span class="o">.</span><span class="n">header</span><span class="o">.</span><span class="n">frame_id</span> <span class="o">=</span> <span class="s">"map"</span>
        <span class="n">turtlebot_robot1_goal</span><span class="o">.</span><span class="n">target_pose</span><span class="o">.</span><span class="n">header</span><span class="o">.</span><span class="n">seq</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="n">turtlebot_robot1_goal</span><span class="o">.</span><span class="n">target_pose</span><span class="o">.</span><span class="n">pose</span><span class="o">.</span><span class="n">position</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">2</span>
        <span class="n">turtlebot_robot1_goal</span><span class="o">.</span><span class="n">target_pose</span><span class="o">.</span><span class="n">pose</span><span class="o">.</span><span class="n">position</span><span class="o">.</span><span class="n">y</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="n">turtlebot_robot1_goal</span><span class="o">.</span><span class="n">target_pose</span><span class="o">.</span><span class="n">pose</span><span class="o">.</span><span class="n">position</span><span class="o">.</span><span class="n">z</span> <span class="o">=</span> <span class="mf">0.0</span>
        <span class="n">turtlebot_robot1_goal</span><span class="o">.</span><span class="n">target_pose</span><span class="o">.</span><span class="n">pose</span><span class="o">.</span><span class="n">orientation</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="mf">0.0</span>
        <span class="n">turtlebot_robot1_goal</span><span class="o">.</span><span class="n">target_pose</span><span class="o">.</span><span class="n">pose</span><span class="o">.</span><span class="n">orientation</span><span class="o">.</span><span class="n">y</span> <span class="o">=</span> <span class="mf">0.0</span>
        <span class="n">turtlebot_robot1_goal</span><span class="o">.</span><span class="n">target_pose</span><span class="o">.</span><span class="n">pose</span><span class="o">.</span><span class="n">orientation</span><span class="o">.</span><span class="n">z</span> <span class="o">=</span> <span class="mf">0.0</span>
        <span class="n">turtlebot_robot1_goal</span><span class="o">.</span><span class="n">target_pose</span><span class="o">.</span><span class="n">pose</span><span class="o">.</span><span class="n">orientation</span><span class="o">.</span><span class="n">w</span> <span class="o">=</span> <span class="mf">1.0</span>
        <span class="c1"># Send the goal to the action server.
</span>        <span class="n">turtlebot_navigation_client</span><span class="o">.</span><span class="n">send_goal</span><span class="p">(</span><span class="n">turtlebot_robot1_goal</span><span class="p">)</span>
        <span class="n">rospy</span><span class="o">.</span><span class="n">loginfo</span><span class="p">(</span><span class="s">"Goal sent to move_base action server."</span><span class="p">)</span>
        <span class="c1"># Wait for the server to finish performing the action.
</span>        <span class="n">turtlebot_navigation_client</span><span class="o">.</span><span class="n">wait_for_result</span><span class="p">()</span>
        <span class="c1"># Display a log message depending on the navigation result.
</span>        <span class="n">navigation_result_status</span> <span class="o">=</span> <span class="n">turtlebot_navigation_client</span><span class="o">.</span><span class="n">get_state</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">GoalStatus</span><span class="o">.</span><span class="n">SUCCEEDED</span> <span class="o">!=</span> <span class="n">navigation_result_status</span><span class="p">:</span>
            <span class="n">rospy</span><span class="o">.</span><span class="n">logerr</span><span class="p">(</span><span class="s">'Navigation to the desired goal failed :(. Sorry, try again!)'</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">rospy</span><span class="o">.</span><span class="n">loginfo</span><span class="p">(</span><span class="s">'Hooray! Successfully reached the desired goal!'</span><span class="p">)</span>
    <span class="k">except</span> <span class="n">rospy</span><span class="o">.</span><span class="n">ROSInterruptException</span><span class="p">:</span>
        <span class="n">rospy</span><span class="o">.</span><span class="n">loginfo</span><span class="p">(</span><span class="s">"Interrupt received to stop ROS node."</span><span class="p">)</span>

</code></pre></div></div>
:ET