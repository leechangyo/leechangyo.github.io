I"a8<h1 id="ucb1">UCB1</h1>
<p><a href="https://postimg.cc/R3d6WKJM"><img src="https://i.postimg.cc/hjW930S7/52139182305921.png" width="700px" title="source: imgur.com" /></a></p>

<ul>
  <li>Another Method to Solve Explore-Exploit ( also from A/B Testing Classes)</li>
  <li>Idea: confidence bounds</li>
  <li>Intuitively, we know that sample mean from 10 samples is less accurate than a sample mean from 1000 samples</li>
  <li>Chefnoff Hoeffiding bound:
<a href="https://postimg.cc/YvWgXvG7"><img src="https://i.postimg.cc/T3k93mTK/521252152525215.png" width="700px" title="source: imgur.com" /></a></li>
  <li>Looks complicated, but leads to a simple algorithm
<a href="https://postimg.cc/wyGj8kZG"><img src="https://i.postimg.cc/j2swfgXt/1242141413123.png" width="700px" title="source: imgur.com" /></a></li>
  <li>square(2*ln(N)/N_j) &lt;- “Choose” epsilon equal to this upper bound</li>
  <li>N = number of times i’ve played in total, N_j = number of times i’ve played bandit j</li>
  <li>How do we use this formular? Same as optimistic initial values Method</li>
  <li>just be greedy, but with respect to <script type="math/tex">\ln{X}_{UCB-J}</script></li>
  <li>Key: ratio Between ln(N) and $N_j$</li>
  <li>if only $N_j$ is small, then upper bound is high</li>
  <li>if $N_j$ is large, upper bound is small</li>
  <li>ln(N) grow more slowly than N, so eventually all upper bounds will shrink</li>
  <li>by then we’ve collected lots of data, so it’s ok</li>
  <li>so we converge to purely greedy strategy</li>
  <li>ε-greedy는 추측값이나 불확실성과랑 관계없이 무조건 랜덤하게 실행하는 반면에 어떤 액션을 했을 때, 그 액션은 많이 해봤으니 어느정도 불확실할 것이라는 전재로 불확실성을 고려하여 액션을 취한다.)</li>
  <li>즉 시간이 지날 수록 ln(N)의 값은 작아지는데, 많은 샘플들이 쌓이면 0으로 수렴함으로 결곡 적은 샘플을 가지고 있을때 취하는 액션들을 보정해준다고 보면 된다.</li>
</ul>

<blockquote>
  <p>Code</p>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">from</span> <span class="nn">Comparing_epsilons</span> <span class="kn">import</span> <span class="n">run_experiment</span> <span class="k">as</span> <span class="n">run_experiment_eps</span>

<span class="k">class</span> <span class="nc">bandit</span><span class="p">:</span>
    <span class="s">"""docstring for ."""</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">upper_limit</span> <span class="o">=</span> <span class="mi">0</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">m</span> <span class="o">=</span> <span class="n">m</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">mean</span> <span class="o">=</span> <span class="n">upper_limit</span>
        <span class="c1">#the mean instance variable is our estimate of the bandit's mean
</span>        <span class="bp">self</span><span class="o">.</span><span class="n">N</span> <span class="o">=</span> <span class="mi">1</span>

    <span class="k">def</span> <span class="nf">pull</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">()</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">m</span>
    <span class="c1"># the pull function which is simulates pulling the bandit's arm
</span>    <span class="c1"># every bandit's reward will be a gassium with unit variant
</span>

    <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">N</span> <span class="o">+=</span><span class="mi">1</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">mean</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="mf">1.0</span><span class="o">/</span><span class="bp">self</span><span class="o">.</span><span class="n">N</span><span class="p">)</span><span class="o">*</span><span class="bp">self</span><span class="o">.</span><span class="n">mean</span> <span class="o">+</span> <span class="mf">1.0</span><span class="o">/</span><span class="bp">self</span><span class="o">.</span><span class="n">N</span><span class="o">*</span><span class="n">x</span>

    <span class="c1">#Finally, we have the update function which takes an X, which is the latest sample recieved from the bandit
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">ucb</span><span class="p">(</span><span class="n">mean</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">nj</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">nj</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span> <span class="nb">float</span><span class="p">(</span><span class="s">'inf'</span><span class="p">)</span> <span class="c1">#infinity
</span>
    <span class="k">return</span> <span class="n">mean</span> <span class="o">+</span> <span class="n">np</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">np</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="o">/</span> <span class="n">nj</span><span class="p">)</span>
</code></pre></div></div>

<script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>

<div align="center" style="margin: 1em 0;">
<ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-5150894678574694" data-ad-slot="9221331439" data-ad-format="auto" data-full-width-responsive="true"></ins>
     </div>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">run_experiment</span><span class="p">(</span><span class="n">m1</span><span class="p">,</span> <span class="n">m2</span><span class="p">,</span> <span class="n">m3</span><span class="p">,</span> <span class="n">N</span><span class="p">):</span>
    <span class="n">bandits</span> <span class="o">=</span> <span class="p">[</span><span class="n">bandit</span><span class="p">(</span><span class="n">m1</span><span class="p">),</span> <span class="n">bandit</span><span class="p">(</span><span class="n">m2</span><span class="p">),</span> <span class="n">bandit</span><span class="p">(</span><span class="n">m3</span><span class="p">)]</span>

    <span class="n">data</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">empty</span><span class="p">(</span><span class="n">N</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
        <span class="n">j</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">argmax</span><span class="p">([</span><span class="n">ucb</span><span class="p">(</span><span class="n">b</span><span class="o">.</span><span class="n">mean</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">b</span><span class="o">.</span><span class="n">N</span><span class="p">)</span> <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">bandits</span><span class="p">])</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">bandits</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">.</span><span class="n">pull</span><span class="p">()</span>
        <span class="n">bandits</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="c1"># for the plot
</span>        <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span>
    <span class="n">cumulative_average</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">cumsum</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="n">N</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>

  <span class="c1"># for b in bandits:
</span>  <span class="c1">#   print("bandit nj:", b.N)
</span>
  <span class="c1"># plot moving average ctr
</span>    <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">cumulative_average</span><span class="p">)</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">ones</span><span class="p">(</span><span class="n">N</span><span class="p">)</span><span class="o">*</span><span class="n">m1</span><span class="p">)</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">ones</span><span class="p">(</span><span class="n">N</span><span class="p">)</span><span class="o">*</span><span class="n">m2</span><span class="p">)</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">ones</span><span class="p">(</span><span class="n">N</span><span class="p">)</span><span class="o">*</span><span class="n">m3</span><span class="p">)</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">xscale</span><span class="p">(</span><span class="s">'log'</span><span class="p">)</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>

  <span class="c1"># for b in bandits:
</span>  <span class="c1">#   print(b.mean)
</span>    <span class="k">return</span> <span class="n">cumulative_average</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
    <span class="n">c_1</span> <span class="o">=</span> <span class="n">run_experiment_eps</span><span class="p">(</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">3.0</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">,</span> <span class="mi">100000</span><span class="p">)</span>
    <span class="n">ucb</span> <span class="o">=</span> <span class="n">run_experiment</span><span class="p">(</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">3.0</span><span class="p">,</span> <span class="mi">100000</span><span class="p">)</span>

    <span class="c1"># log scale plot
</span>    <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">c_1</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">'eps = 0.1'</span><span class="p">)</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ucb</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">'ucb1'</span><span class="p">)</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">legend</span><span class="p">()</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">xscale</span><span class="p">(</span><span class="s">'log'</span><span class="p">)</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>

    <span class="c1"># linear plot
</span>    <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">c_1</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">'eps = 0.1'</span><span class="p">)</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ucb</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">'ucb1'</span><span class="p">)</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">legend</span><span class="p">()</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<h1 id="bayesian-method">Bayesian Method</h1>
<ul>
  <li>thompson sampling</li>
</ul>
:ET