I"Y<h2 id="1-outline">1. Outline</h2>
<ul>
  <li>play_game(p1,p2,env)</li>
  <li>USE OOP approach
<a href="https://postimg.cc/FYGhnGg0"><img src="https://i.postimg.cc/pdMyr6mc/9695959.png" width="700px" title="source: imgur.com" /></a></li>
</ul>

<h2 id="2-representing-states">2. representing States</h2>
<ul>
  <li>last post, I told you this would be an O(1) lookup (as in an array )</li>
  <li>Possible solution: Convert the board to tuple of tuples, use as dictionary Key</li>
  <li>Better: Map Each state to a number, use numpy array</li>
</ul>

<h2 id="3-mapping-state-to-a-number">3. Mapping state to a number</h2>
<ul>
  <li>there are 3 state, “O”, “X”, “Empty”</li>
  <li>9 array so all possible state is 3^9 = 19683</li>
  <li>overhead not a problem, these states are unreachable(e.g. 3x’s in a row and 3o’s in a row on the same board)</li>
  <li>Should remind us of binary numbers(2 Possible symbols in each location vs 3)</li>
  <li>binary to decimal(小数):
<a href="https://postimg.cc/BjYZhM4R"><img src="https://i.postimg.cc/cJZKLbj1/5515123.png" width="300px" title="source: imgur.com" /></a></li>
  <li>For us:
<a href="https://postimg.cc/dhbQPDZ9"><img src="https://i.postimg.cc/Gp24Dyc6/552152132123.png" width="300px" title="source: imgur.com" /></a></li>
</ul>

<blockquote>
  <p>In code</p>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">k</span><span class="o">=</span><span class="mi">0</span>
<span class="n">h</span><span class="o">=</span><span class="mi">0</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="n">Length</span><span class="p">):</span>
  <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="n">Length</span><span class="p">):</span>
    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
      <span class="n">v</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">x</span><span class="p">:</span>
      <span class="n">v</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">o</span><span class="p">:</span>
      <span class="n">v</span> <span class="o">=</span> <span class="mi">2</span>
    <span class="n">h</span> <span class="o">+</span> <span class="o">=</span> <span class="p">(</span><span class="mi">3</span><span class="o">**</span><span class="n">k</span><span class="p">)</span><span class="o">*</span><span class="n">v</span>
    <span class="n">k</span> <span class="o">+</span> <span class="o">=</span> <span class="mi">1</span>
</code></pre></div></div>

<h2 id="4-initializing-the-value-function">4. Initializing the value function</h2>
<ul>
  <li>Recall, we initialize V(s) as :
    <ul>
      <li>1 if s == winning terminal state</li>
      <li>0 if s == lose or draw terminal state</li>
      <li>0.5 otherwise</li>
    </ul>
  </li>
  <li>how do we find all the “s”?</li>
</ul>

<h2 id="5-enumerating-state">5. Enumerating state</h2>
<p><a href="https://postimg.cc/XpKd8Bh5"><img src="https://i.postimg.cc/zX67qnFx/5512334.png" width="500px" title="source: imgur.com" /></a></p>

<ul>
  <li>lets think which is better ?
1) Create a “game tree “ of all possible in the game?
2) Create a permutation(排列) of all possible settings of all possible positions on the board?</li>
</ul>

<h3 id="game-tree">Game Tree</h3>
<p><a href="https://postimg.cc/Czp65Dkn"><img src="https://i.postimg.cc/CLRyvsK7/5122342314124.gif" width="500px" title="source: imgur.com" /></a></p>
<ul>
  <li>Problem : redundant states</li>
  <li>i.e. see the same state more than once in the tree</li>
</ul>

<p>Start: 9 choices
then: 8 choices
then: 7 choices
….</p>

<p>9! = 362880 » 3^9</p>

<h2 id="permutation순열">permutation(<a href="https://ko.wikipedia.org/wiki/%EC%88%9C%EC%97%B4]">순열</a>)</h2>
<p><a href="https://postimg.cc/9DbxxQ0x"><img src="https://i.postimg.cc/jj0GSWbr/521423121.gif" width="500px" title="source: imgur.com" /></a></p>
<ul>
  <li>How? think binary first:</li>
  <li>Generate permutation of Length N:
    <blockquote>
      <p>0 + Generate permutation of length N -1 <br />
 1 + Generate Permutation of Length N - 1</p>
    </blockquote>
  </li>
</ul>

<pre><code class="language-pseudocode"> def generate_all_binary_numbers(N):
   results = {}
   child_results = generate_all_binary_numbers(N-1)
   for prefix in ('0', '1'):
     for suffix in child_results:
       new_result = prefix + suffix
       returns.append(new_result)
   return results

(base case not shown for simplicity)
</code></pre>
<ul>
  <li>if don’t get about this please check in <a href="https://www.youtube.com/watch?v=fkjv6OEyC0g">here</a></li>
</ul>
:ET