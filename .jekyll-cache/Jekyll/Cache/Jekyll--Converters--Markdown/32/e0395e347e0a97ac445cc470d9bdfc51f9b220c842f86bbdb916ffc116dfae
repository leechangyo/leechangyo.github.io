I"’<h1 id="exercise">Exercise</h1>
<blockquote>
  <p>Main.cpp</p>
</blockquote>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#include &lt;iostream&gt;
#include "point.h"

using namespace std;
/* inheritance between classes */

void operationOnPoints();

int main()
{
    operationOnPoints();

    return 0;
}
void operationOnPoints()
{
    Point2D p2(10, 67);

    p2.Point::setX(5);

    cout &lt;&lt; p2.getX() &lt;&lt; endl;
    cout &lt;&lt; p2.getY() &lt;&lt; endl;
}


</code></pre></div></div>

<blockquote>
  <p>point.h</p>
</blockquote>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#ifndef POINT_H_INCLUDED
#define POINT_H_INCLUDED

class Point //base, parent, superclass
{
    protected:
        int x;
    public:
        Point(int =0);
        ~Point();
        int getX() { return x; }
        void setX(int);
};
class Point2D : public Point //derived, child, subclass
{
    protected:
        int y;
    public:
        Point2D(int =0, int =0);
        ~Point2D();
        int getY() { return y; }
        void setY(int);
        void setX(int);
        void setXY(int, int);

};
class Point3D : public Point2D
{

};

/*
    class Point2D : public Point
    everything what is inside Point (excluding constructor and destructor) will be in Point2D
    private - CANNOT ACCESS
    protected - protected
    public - public

    class Point2D : protected Point
    everything what is inside Point (excluding constructor and destructor) will be in Point2D
    private - CANNOT ACCESS
    protected - protected
    public - protected


    class Point2D : private Point
    everything what is inside Point (excluding constructor and destructor) will be in Point2D
    private - CANNOT ACCESS
    protected - private
    public - private

*/
#endif // POINT_H_INCLUDED
</code></pre></div></div>

<blockquote>
  <p>point.cpp</p>
</blockquote>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#include &lt;iostream&gt;
#include "point.h"


using namespace std;

Point::Point(int x)
{
    this-&gt;x = x;
    cout &lt;&lt; "The constructor from the Point class has just been invoked" &lt;&lt; endl;
}
Point::~Point()
{
    cout &lt;&lt; "The destructor from the Point class has just been invoked" &lt;&lt; endl;
}
void Point::setX(int x)
{
    this-&gt;x = x;
    cout &lt;&lt; "Im from Point" &lt;&lt; endl;
}

Point2D::Point2D(int x, int y) : Point(x) // parents
{
    this-&gt;y = y;
    cout &lt;&lt; "The constructor from the Point2D class has just been invoked" &lt;&lt; endl;
}
Point2D::~Point2D()
{
    cout &lt;&lt; "The destructor from the Point2D class has just been invoked" &lt;&lt; endl;
}

void Point2D::setY(int y)
{
    this-&gt;y = y;
}
void Point2D::setXY(int x, int y)
{
    setX(x);
    setY(y);
}
void Point2D::setX(int x)
{
    this-&gt;x = x;
    cout &lt;&lt; "Im from Point2D" &lt;&lt; endl;
}
</code></pre></div></div>
:ET