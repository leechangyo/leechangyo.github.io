I"<h1 id="exercise-polymorphic-pointer">Exercise (Polymorphic Pointer)</h1>

<blockquote>
  <p>Main.cpp</p>
</blockquote>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#include "Rectangle.h"
#include "Circle.h"
#include &lt;iostream&gt;

using namespace std;

void introduceShape(Shape*);
double calculateShapeArea(Shape*);
double calculateShapeCircumferece(Shape*);

int main()
{

    Rectangle rectangle1(5,2);
    Circle circle1(3);

    introduceShape(&amp;rectangle1);
    cout &lt;&lt; "My area is: " &lt;&lt; calculateShapeArea(&amp;rectangle1) &lt;&lt; ", my circumference is: " &lt;&lt; calculateShapeCircumferece(&amp;rectangle1) &lt;&lt; endl &lt;&lt; endl;

    introduceShape(&amp;circle1);
    cout &lt;&lt; "My area is: " &lt;&lt; calculateShapeArea(&amp;circle1) &lt;&lt; ", my circumference is: " &lt;&lt; calculateShapeCircumferece(&amp;circle1) &lt;&lt; endl;

    return 0;
}

void introduceShape(Shape* shapeToIntroduce)
{
    return shapeToIntroduce-&gt;introduce();
}

double calculateShapeArea(Shape* shapeToCalculate)
{
    return shapeToCalculate-&gt;calculateArea();
}

double calculateShapeCircumferece(Shape* shapeToCalculate)
{
    return shapeToCalculate-&gt;calculateCircumference();
}

</code></pre></div></div>

<blockquote>
  <p>Rectangle.h</p>
</blockquote>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#ifndef RECTANGLE_H_INCLUDED
#define RECTANGLE_H_INCLUDED
#include "Shape.h"

class Rectangle: public Shape
{
    double width;
    double height;
public:
    Rectangle(double, double);
    void introduce();
    double calculateArea();
    double calculateCircumference();

};


#endif // RECTANGLE_H_INCLUDED

</code></pre></div></div>

<blockquote>
  <p>circle.h</p>
</blockquote>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#ifndef CIRCLE_H_INCLUDED
#define CIRCLE_H_INCLUDED
#include "Shape.h"

class Circle: public Shape
{
    double radius;
public:
    Circle(double);
    void introduce();
    double calculateArea();
    double calculateCircumference();
};


#endif // CIRCLE_H_INCLUDED
</code></pre></div></div>

<blockquote>
  <p>Rectangle.cpp
```
#include “Rectangle.h”
#include <iostream></iostream></p>
</blockquote>

<p>Rectangle::Rectangle(double width, double height)
{
    this-&gt;width = width;
    this-&gt;height = height;
}
void Rectangle::introduce()
{
    std::cout « “I AM A RECTANGLE !” « std::endl;
}
double Rectangle::calculateArea()
{
    return width<em>height;
}
double Rectangle::calculateCircumference()
{
    return 2</em>(width+height);
}</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
&gt; Circle.cpp
</code></pre></div></div>
<p>#include “Circle.h”
#include <iostream>
#define PI 3.14</iostream></p>

<p>Circle::Circle(double radius)
{
    this-&gt;radius = radius;
}
void Circle::introduce()
{
    std::cout « “I AM A CIRCLE !” « std::endl;
}
double Circle::calculateArea()
{
    return PI<em>radius</em>radius;
}
double Circle::calculateCircumference()
{
    return 2<em>PI</em>radius;
}</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
# Exercise 2 (Virtual destructor)

- 동적 함수로 직사각형과, 원을 Instance 한다.
- 그렇게 되면 rectangle과 circlel은 Shape 클래스에 포인터 함수가 되여 동적으로 사용 할 수 있다.
- 사용 후 Delete 될때 shape.h에서 가상 destructor도 종료가 되면서 모든 값이 초기화 된다.
&gt; main.cpp


</code></pre></div></div>
<p>#include “Rectangle.h”
#include “Circle.h”
#include <iostream></iostream></p>

<p>using namespace std;</p>

<p>void introduceShape(Shape<em>);
double calculateShapeArea(Shape</em>);
double calculateShapeCircumferece(Shape*);</p>

<p>int main()
{
    Shape* rectangle1 = new Rectangle(5,2);
    Shape* circle1 = new Circle(3);</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>introduceShape(rectangle1);
cout &lt;&lt; "My area is: " &lt;&lt; calculateShapeArea(rectangle1) &lt;&lt; ", my circumference is: " &lt;&lt; calculateShapeCircumferece(rectangle1) &lt;&lt; endl &lt;&lt; endl;

introduceShape(circle1);
cout &lt;&lt; "My area is: " &lt;&lt; calculateShapeArea(circle1) &lt;&lt; ", my circumference is: " &lt;&lt; calculateShapeCircumferece(circle1) &lt;&lt; endl &lt;&lt; endl;

delete rectangle1;
delete circle1;
return 0; }
</code></pre></div></div>

<p>void introduceShape(Shape* shapeToIntroduce)
{
    return shapeToIntroduce-&gt;introduce();
}</p>

<p>double calculateShapeArea(Shape* shapeToCalculate)
{
    return shapeToCalculate-&gt;calculateArea();
}</p>

<p>double calculateShapeCircumferece(Shape* shapeToCalculate)
{
    return shapeToCalculate-&gt;calculateCircumference();
}</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
&gt; shape.h

</code></pre></div></div>
<p>#ifndef SHAPE_H_INCLUDED
#define SHAPE_H_INCLUDED
#include <iostream></iostream></p>

<p>class Shape
{
    public:
        virtual ~Shape() {std::cout « “Shape destructor !” « std::endl;};
        virtual void introduce() = 0;
        virtual double calculateArea() = 0;
        virtual double calculateCircumference() = 0;
};</p>

<p>#endif // SHAPE_H_INCLUDED</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
&gt; rectangle.h

</code></pre></div></div>
<p>#ifndef RECTANGLE_H_INCLUDED
#define RECTANGLE_H_INCLUDED
#include “Shape.h”</p>

<p>class Rectangle: public Shape
{
    double width;
    double height;
public:
    Rectangle(double, double);
    ~Rectangle();</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>void introduce();
double calculateArea();
double calculateCircumference(); };
</code></pre></div></div>

<p>#endif // RECTANGLE_H_INCLUDED</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
&gt; circle.h

</code></pre></div></div>
<p>#ifndef CIRCLE_H_INCLUDED
#define CIRCLE_H_INCLUDED
#include “Shape.h”</p>

<p>class Circle: public Shape
{
    double radius;
public:
    Circle(double);
    ~Circle();</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>void introduce();
double calculateArea();
double calculateCircumference(); };
</code></pre></div></div>

<p>#endif // CIRCLE_H_INCLUDED</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
&gt; circle.cpp

</code></pre></div></div>
<p>#include “Circle.h”
#include <iostream>
#define PI 3.14</iostream></p>

<p>Circle::Circle(double radius)
{
    this-&gt;radius = radius;
}</p>

<p>Circle::~Circle()
{
    std::cout « “Circle destructor !” « std::endl;
}</p>

<p>void Circle::introduce()
{
    std::cout « “I AM A CIRCLE !” « std::endl;
}</p>

<p>double Circle::calculateArea()
{
    return PI<em>radius</em>radius;
}</p>

<p>double Circle::calculateCircumference()
{
    return 2<em>PI</em>radius;
}</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
&gt; rectangle.cpp

</code></pre></div></div>
<p>#include “Rectangle.h”
#include <iostream></iostream></p>

<p>Rectangle::Rectangle(double width, double height)
{
    this-&gt;width = width;
    this-&gt;height = height;
}</p>

<p>Rectangle::~Rectangle()
{
    std::cout « “Rectangle destructor !” « std::endl;
}</p>

<p>void Rectangle::introduce()
{
    std::cout « “I AM A RECTANGLE !” « std::endl;
}
double Rectangle::calculateArea()
{
    return width<em>height;
}
double Rectangle::calculateCircumference()
{
    return 2</em>(width+height);
}</p>

<p>```</p>

<blockquote>
  <p>결과값</p>
</blockquote>

<p><a href="https://postimg.cc/2Vvbw4dK"><img src="https://i.postimg.cc/YqD6tRvM/411313123.png" width="500px" title="source: imgur.com" /><a></a></a></p>
:ET