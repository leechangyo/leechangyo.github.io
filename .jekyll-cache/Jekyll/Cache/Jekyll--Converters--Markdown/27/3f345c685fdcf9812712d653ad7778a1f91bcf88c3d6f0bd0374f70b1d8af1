I"$<h1 id="review">Review</h1>
<ul>
  <li>Multi-armed bandit Review(Bayesian machine learning: A/B Testing)</li>
  <li>Explore-exploit dilemma</li>
  <li>4 Algorithms:
    <ul>
      <li>Epsilon-greedy</li>
      <li>Optimistic initial Value</li>
      <li>UCB1</li>
      <li>Thompson Sampling</li>
    </ul>
  </li>
  <li>Basic definitions in RL</li>
  <li>Tic-Tac-Toe</li>
  <li>MDPs</li>
  <li>Policies state-value functions, action-value funtions</li>
  <li>Return</li>
  <li>3 methods:
    <ul>
      <li>Dynamic Programming(direct application of bellman’s Equation)
        <ul>
          <li>Policy iteration, Value iteration</li>
        </ul>
      </li>
      <li>Monte Carlo
        <ul>
          <li>Learning from experience</li>
          <li>Not fully online</li>
        </ul>
      </li>
      <li>Temporal Difference Learning
        <ul>
          <li>Fully online with bootstrapping</li>
          <li>Also learn from experience</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Approximation Methods</li>
  <li>Tabular methods can be infeasible for large state spaces
    <ul>
      <li>action value funtion을 Q-table로 작성하여 푸는 방법</li>
    </ul>
  </li>
  <li>differential models(feature engineering)
    <h2 id="1-review-of-mdps">1. Review of MDPs</h2>
  </li>
  <li>Markov decision Processes</li>
  <li>MDPs a collection of 5 things:
    <ul>
      <li>set of all states</li>
      <li>set of all actions</li>
      <li>set of all rewards</li>
      <li>state transition probabilities</li>
      <li>Discount factor(gamma)</li>
    </ul>
  </li>
  <li>States
    <ul>
      <li>State represents what the sensors of our agent measure from the environment</li>
      <li>In GridWorld, that would be our position on the board</li>
      <li>in tic-tac-toe: specific configuration of pieces on the board</li>
      <li>Video game: pixel on the screen</li>
      <li>Maybe also : # of lives we have left, health, etc</li>
      <li>For an AI to be as human as possible maybe we should require it to learn that only from pixels on the screen</li>
    </ul>
  </li>
  <li>Actions
    <ul>
      <li>Anything the agent can do while in a state</li>
      <li>tic-tac-toe: placing a piece on the board</li>
      <li>Video game: moving up/down/left/right, pressing an action button</li>
    </ul>
  </li>
  <li>Rewards
    <ul>
      <li>Agent receives a reward at every time step</li>
      <li>reward are real-valued</li>
      <li>goal of agent is to maximize total future reward</li>
      <li>careful to define rewards the right way</li>
      <li>Ex. Robot trying to solve a maze receives a reward of 0 at every step and 1 for solving the maze</li>
      <li>possible that robot will never solve the maze, or solve it very inefficiently</li>
      <li>it has only experience 0 reward, thinks that is the best it can do, no incentive to not act randomly</li>
      <li>better solution is -1 reward at every time step</li>
      <li>now it has incentive to solve the maze as quickly as possible</li>
      <li>“Negative” and “Positive” don’t have connotations(含义) when it comes to RL agents</li>
      <li>just a number on a scale</li>
      <li>E.g -3 is better reward than -300</li>
      <li>been debated whether or not we should override the default rewards</li>
      <li>in real world environment, we would be the ones defining rewards</li>
    </ul>
  </li>
  <li>State-transition probabilities
    <ul>
      <li>At first glance, might seem unnecessary</li>
      <li><strong>p(s’,r I s,a)</strong></li>
      <li>if we do action a while in state s, won’t i always go to s?</li>
      <li>GridWorld: action “up”, should always take us to the square above</li>
      <li>Not all environments are deterministic - have a source of randomness</li>
      <li>reading of the state can be imperfect</li>
      <li>may only reflect partial knowledge</li>
    </ul>
  </li>
  <li>Makrov propertys
    <ul>
      <li>p[s(t+1),r(t+1)I s(t), a(t), s(t-1), a(t-1),…,(s1),a(1)]=p[s(t+1),r(t+1) I s(t), a(t)]</li>
      <li>as usual by “Markov” we mean first-order Markov</li>
      <li>A.K.a <strong>Markov assumption</strong></li>
      <li>p(s’,r I s,a)</li>
      <li>Note: ‘ don’t mean t+1</li>
    </ul>
  </li>
  <li>Discount factor
    <ul>
      <li>we would rather get $100 now than $100 years from now</li>
      <li>we would like to maximize total future reward</li>
      <li>the further we look into the future, the harder it is to predict</li>
      <li>therefore, discount future rewards to make them “matter less”</li>
      <li>we can then define the return:
<a href="https://postimg.cc/cK74Z9bq"><img src="https://i.postimg.cc/43qK6jv3/412312312.png" width="500px" title="source: imgur.com" /><a></a></a></li>
    </ul>
  </li>
  <li>Value Function
    <ul>
      <li>Because rewards are probabilistic, and return are sums of rewards, they are also probabilistic</li>
      <li>can define <strong>the expected value</strong> - call this the <strong>Value Funtion</strong></li>
      <li>The expected return from being in state s
<a href="https://postimg.cc/629RNGz0"><img src="https://i.postimg.cc/9M9BZd7v/41212312312.png" width="700px" title="source: imgur.com" /><a></a></a></li>
    </ul>
  </li>
  <li>State-Value and Action-Value
    <h1 id="next-steps">Next Steps</h1>
  </li>
  <li>Continuous state-spaces
    <ul>
      <li><a href="https://en.wikipedia.org/wiki/Light_intensity">light intensity</a> in 3-D space</li>
      <li>3-D space is Continuous, light intensity is Continuous</li>
    </ul>
  </li>
  <li>Continuous action-space
    <ul>
      <li><strong>Amount of force applied to a motor</strong></li>
    </ul>
  </li>
  <li>parameterized V</li>
  <li>parameterized π
    <ul>
      <li>it called <strong>“policy gradient”</strong> method</li>
    </ul>
  </li>
  <li>learned from our current experience only</li>
  <li>as we play, we accumulate(input, target) pairs
    <ul>
      <li>E.g accumulate training data</li>
    </ul>
  </li>
  <li>save these in a file and do more training</li>
  <li>in deep learning, we loop through the same training data multiple times (called ‘epochs’)</li>
  <li>No reason we can’t learn from our previous experience as well</li>
  <li>Replay a previous episode, update params based on old episodes</li>
  <li>CNNs</li>
  <li>RNNs</li>
  <li>Regression, Classification</li>
</ul>
:ET