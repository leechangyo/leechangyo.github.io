I"z<h1 id="class">Class</h1>
<ul>
  <li>Class는 파이썬과 마찬가지로 프로젝트를 함에 있어 알고리즘을 나누는 역할을 한다.</li>
  <li>예로 어떤 클래스는 더하기를, 어떤 클래스를 곱하기를 역할을 나눠주고 Main Class에다가 합쳐 Main클래스를 간결하게 해준다.</li>
</ul>

<h1 id="exercise-1">Exercise 1</h1>
<blockquote>
  <p>Main.cpp</p>
</blockquote>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#include &lt;iostream&gt;
#include "people.h"
using namespace std;
/* classes */

void test()
{
    PersonalData *pointer = new PersonalData[5];

    delete []pointer;
}

int main()
{

    PersonalData person(20);
    PersonalData person2(50);

    cout &lt;&lt; person.getAge()&lt;&lt; endl;
    cout &lt;&lt; person2.getAge() &lt;&lt; endl;


   // test();
    return 0;
}


</code></pre></div></div>

<blockquote>
  <p>people.h</p>
</blockquote>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#ifndef PEOPLE_H_INCLUDED
#define PEOPLE_H_INCLUDED

class PersonalData
{
    private:
        short age; // the first argument taken
        int *p;
    public:
        PersonalData(); // 인수가 없으면 이 클래스로 가고 있으면 아래 클래스로 간다.
        PersonalData(short);
        ~PersonalData();
        /**
            This function is setting age. If age is lower than 0, then age = 10.
        */
        void setAge(int);
        short getAge() {return age;}
};

#endif // PEOPLE_H_INCLUDED

</code></pre></div></div>

<blockquote>
  <p>people.cpp</p>
</blockquote>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#include "people.h"
#include &lt;iostream&gt;

using namespace std;
void PersonalData::setAge(int age)
{
    if (age &lt; 0)
        this-&gt;age = 0;
    else
        this-&gt;age = age;
}
PersonalData::PersonalData()
{
    static int i = 0;
    cout &lt;&lt; "Constructor has been just invoked " &lt;&lt; ++i &lt;&lt; endl;
    age = 10;

    p = new int[5];
}
PersonalData::PersonalData(short age)
{
    cout &lt;&lt;"this is diff cons" &lt;&lt; endl;
    this-&gt;age = age;
}
PersonalData::~PersonalData()
{
    static int j = 0;
    cout &lt;&lt; "Destructor has been just invoked " &lt;&lt; ++j &lt;&lt; endl;

    delete [] p;
}

</code></pre></div></div>

<ul>
  <li>Result
<a href="https://postimg.cc/w7YszT1N"><img src="https://i.postimg.cc/HsV0QrH6/323131.png" width="500px" title="source: imgur.com" /><a></a></a></li>
</ul>

<h1 id="exercise-2">Exercise 2</h1>
<blockquote>
  <p>Main.cpp</p>
</blockquote>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#include &lt;iostream&gt;
#include "position.h"

using namespace std;

int main()
{
    Position dog(10, 50);

    dog.getPosition();
    dog.setPosition(50, 100);
    dog.getPosition();

    const Position house(100, 200);

    house.getPosition();
//    house.setPosition(444, 444);
    //house.getPosition();

    return 0;
}

</code></pre></div></div>

<blockquote>
  <p>Position.h</p>
</blockquote>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#ifndef POSITION_H_INCLUDED
#define POSITION_H_INCLUDED

class Position
{
    int x, y;
    public:
        Position(int,int);
        ~Position();
        void getPosition() const;
        void setPosition(int, int);
};

#endif // POSITION_H_INCLUDED

</code></pre></div></div>

<blockquote>
  <p>position.cpp</p>
</blockquote>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#include "position.h"
#include &lt;iostream&gt;

using namespace std;

Position::Position(int x, int y)
{
    this-&gt;x = x;
    this-&gt;y = y;
}
Position::~Position()
{

}

void Position::getPosition() const
{
    cout &lt;&lt; "x : " &lt;&lt; x &lt;&lt; endl;
    cout &lt;&lt; "y : " &lt;&lt; y &lt;&lt; endl;
}

void Position::setPosition(int x, int y)
{
    this-&gt;x = x;
    this-&gt;y = y;
}
</code></pre></div></div>

<h1 id="operatorhttpalgamzablogspotcom201603c-operator-overloadinghtml">(operator)[http://algamza.blogspot.com/2016/03/c-operator-overloading.html]</h1>
<ul>
  <li><strong>사용자 정의 클래스</strong> 를 사용할 때 연산자에 특별한 의미를 부여할 수 있다는 점은 C++의 멋진 기능 중 하나입니다.</li>
  <li>이 기능을 연산자 오버로딩(operator overloading) 이라고 합니다. C++의 연산자 오버로딩은 클래스에 특별 멤버 함수를 다음과 같은 명명 규칙에 따라서 작성해 구현할 수 있습니다.
    <h3 id="operator-종류">Operator 종류</h3>
    <ul>
      <li>= (할당 연산자, assignment operator)</li>
      <li>
        <ul>
          <li>
            <ul>
              <li>
                <ul>
                  <li>(이진 산술 연산자, binary arithmetic operators)</li>
                </ul>
              </li>
            </ul>
          </li>
        </ul>
      </li>
      <li>+= -= = (복합 할당 연산자, compound assignment operators)</li>
      <li>== != (비교 연산자, comparison operators)</li>
    </ul>
  </li>
</ul>

<h2 id="예제">예제</h2>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class MyClass {
  public:
  ...
  MyClass &amp; operator=(const MyClass &amp;rhs);
  ...
}

MyClass a, b;
...
b = a;   // b.operator=(a); 와 동일함
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>MyClass&amp; MyClass::operator=(const MyClass &amp;rhs) {
    // 자기 할당을 확인합니다.
    if (this == &amp;rhs)      // 동일 객체?
        return *this;        // 맞네요. 그럼 할당을 건너뛰고 *this를 반환합니다.

    ... // 할당 해제, 새 공간을 할당하고 값을 복사합니다...

    return *this;
}
</code></pre></div></div>

<h1 id="example-3">Example 3</h1>

<blockquote>
  <p>main.cpp</p>
</blockquote>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#include &lt;iostream&gt;
#include "integer.h"

using namespace std;
/* CONVERT constructor - overloading operators */
int main()
{
    Integer a(50);

    int b = a;
    a = 100;
    cout &lt;&lt; a.getNr() &lt;&lt; endl; //100
    cout &lt;&lt; b &lt;&lt; endl; // 50

    cout &lt;&lt; a + b &lt;&lt; endl; //150

    b += a; // a = a + b;

    cout &lt;&lt; b &lt;&lt; endl; // 150

    cout &lt;&lt; a &lt;&lt; endl; // 100

    return 0;
}

</code></pre></div></div>
<blockquote>
  <p>interger.h</p>
</blockquote>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#ifndef INTEGER_H_INCLUDED
#define INTEGER_H_INCLUDED

class Integer
{
    int nr;
    public:
        Integer() { };
        Integer(int);
        operator int();
        int operator+=(Integer);
        int getNr() { return nr; };
};


#endif // INTEGER_H_INCLUDED

</code></pre></div></div>

<blockquote>
  <p>interger.cpp</p>
</blockquote>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#include "integer.h"
#include &lt;iostream&gt;

using namespace std;
Integer::Integer(int nr)
{
    this-&gt;nr = nr;
}
Integer::operator int()
{
    return this-&gt;nr;
}
int Integer::operator+=(Integer o)
{
    this-&gt;nr = o.getNr() + this-&gt;nr; //this는 오퍼레이터에서 받아지는 인수값이다. 그리고 o 는 그 뒤에 받아지는 값
    return this-&gt;nr;
}

</code></pre></div></div>
:ET